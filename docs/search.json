[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Kiki",
    "section": "",
    "text": "In summer 2010, I was walking by the (now closed) pet store in Williamsburg, Brooklyn, and I fell in love with a puppy in the window. There was something about her and somehow I knew right away that she was special and that I needed to get her right that second. She was the best impulse purchase of my life and she turned out to be the most amazing, lovable and gentle creature one could imagine. Kiki was absolutely perfect and we loved her more than anything.\n    She moved with us across country (and then came back), flew on a plane to visit her grandparents in Arizona for Christmases and birthdays, and traveled internationally (OK, we drove with her to Canada a few times, but it still counts). When she got sick and could not longer walk far, we got a stroller to take her on walks because she loved being outside and she loved people watching. She was a fighter - once she was given 6 months to live and she made it into 2 years and we fought for her each and every extra day.\n    It’s been 1 year, 1 month, and 19 days since she’s been gone but I love her just as much and I know I always will."
  },
  {
    "objectID": "mp1.html",
    "href": "mp1.html",
    "title": "Mini-Project 1",
    "section": "",
    "text": "In this part, I created the base table for data analysis using the code provided in the assignment. I also modified column names (Task 1) and recoded the values in the ‘Mode’ column to make them easier to understand and use for analysis (Task 2)."
  },
  {
    "objectID": "mp1.html#task-1---creating-syntatic-names",
    "href": "mp1.html#task-1---creating-syntatic-names",
    "title": "Mini-Project 1",
    "section": "Task 1 - Creating Syntatic Names",
    "text": "Task 1 - Creating Syntatic Names"
  },
  {
    "objectID": "mp1.html#task-2---recoding-the-mode-column",
    "href": "mp1.html#task-2---recoding-the-mode-column",
    "title": "Mini-Project 1",
    "section": "",
    "text": "# A tibble: 3 × 2\n  Agency                                                     total_vrm\n  &lt;chr&gt;                                                          &lt;dbl&gt;\n1 MTA New York City Transit                                10832855350\n2 New Jersey Transit Corporation                            5645525525\n3 Los Angeles County Metropolitan Transportation Authority  4354016659\n\n\n\n\n# A tibble: 3 × 2\n  Mode              total_vrm\n  &lt;chr&gt;                 &lt;dbl&gt;\n1 Bus             49444494088\n2 Demand Response 17955073508\n3 Heavy Rail      14620362107\n\n\n\n\n# A tibble: 3 × 1\n    total_vrm\n        &lt;dbl&gt;\n1 14620362107\n2          NA\n3          NA"
  },
  {
    "objectID": "mp1.html#testing-gt-package",
    "href": "mp1.html#testing-gt-package",
    "title": "Mini-Project 1",
    "section": "",
    "text": "#if(!require(“gt”)) install.packages(“gt”) #library(gt)\n#sample_n(USAGE, 100) |&gt; # gt()|&gt; # tab_header( # title=“Table 1” # )"
  },
  {
    "objectID": "mp1.html#part-1---getting-data-ready-for-analysis.",
    "href": "mp1.html#part-1---getting-data-ready-for-analysis.",
    "title": "Mini-Project 1",
    "section": "",
    "text": "In this part, I created the base table for data analysis using the provided in the assignment code. I also modified column names (Task 1) and recoded the values in the ‘Mode’ column to make them easier to understand and use for analysis (Task 2)."
  },
  {
    "objectID": "mp1.html#part-2---analyzing-transit-data.",
    "href": "mp1.html#part-2---analyzing-transit-data.",
    "title": "Mini-Project 1",
    "section": "Part 2 - Analyzing transit data.",
    "text": "Part 2 - Analyzing transit data.\n\nQ1. What transit agency had the most total VRM in this dataset?\nNot surprisingly, MTA New York City Transit has the largest total VRM in this dataset. Its total of 10.8B+ trips is almost double the total miles recorded by New Jersey Transit Corporation, the agency with the second largest result.\n\n\n# A tibble: 3 × 2\n  Agency                                                     total_vrm\n  &lt;chr&gt;                                                          &lt;dbl&gt;\n1 MTA New York City Transit                                10832855350\n2 New Jersey Transit Corporation                            5645525525\n3 Los Angeles County Metropolitan Transportation Authority  4354016659\n\n\n\n\nQ2. What transit mode had the most total VRM in this dataset?\nWith over 49 billion miles, bus has the most total VRM in this dataset.\n\n\n# A tibble: 3 × 2\n  Mode              total_vrm\n  &lt;chr&gt;                 &lt;dbl&gt;\n1 Bus             49444494088\n2 Demand Response 17955073508\n3 Heavy Rail      14620362107\n\n\n\n\nQ3. How many trips were taken on the NYC Subway (Heavy Rail) in May 2024?\nThere were slightly over 180 million trips on NYC Subway in May 2024.\n\n\n# A tibble: 1 × 1\n  total_trips\n        &lt;dbl&gt;\n1   180458819\n\n\n\n\nQ5. How much did NYC subway ridership fall between April 2019 and April 2020?\nNYC subway ridership fell by 92% between April 2019 and April 2020 because of Covid pandemic.\n\n\n# A tibble: 1 × 3\n  apr19_trips apr20_trips pct_change\n        &lt;dbl&gt;       &lt;dbl&gt;      &lt;dbl&gt;\n1   232223929    20254269     -0.913"
  },
  {
    "objectID": "mp1.html#task-1-2---getting-data-ready-for-analysis.",
    "href": "mp1.html#task-1-2---getting-data-ready-for-analysis.",
    "title": "Mini-Project 1",
    "section": "",
    "text": "In this part, I created the base table for data analysis using the code provided in the assignment. I also modified column names (Task 1) and recoded the values in the ‘Mode’ column to make them easier to understand and use for analysis (Task 2)."
  },
  {
    "objectID": "mp1.html#task-3---analyzing-transit-data.",
    "href": "mp1.html#task-3---analyzing-transit-data.",
    "title": "Mini-Project 1",
    "section": "Task 3 - Analyzing transit data.",
    "text": "Task 3 - Analyzing transit data.\n\nQ1. What transit agency had the most total VRM in this dataset?\nNot surprisingly, MTA New York City Transit has the largest total mileage in this dataset. Its total of 10.8B+ trips is almost double of the amount attributed to New Jersey Transit Corporation, the agency with the second largest result.\n\n\n\n\n\n\n\n\nTop 3 Transit Agencies by Total VRM\n\n\nAgency\nTOTAL_VRM\n\n\n\n\nMTA New York City Transit\n10,832,855,350\n\n\nNew Jersey Transit Corporation\n5,645,525,525\n\n\nLos Angeles County Metropolitan Transportation Authority\n4,354,016,659\n\n\n\n\n\n\n\n\n\nQ2. What transit mode had the most total VRM in this dataset?\nWith over 49 billion miles, bus has the most total VRM in this dataset.\n\nUSAGE |&gt;\n  group_by(Mode) |&gt;\n  summarize(TOTAL_VRM = sum(VRM, na.rm = TRUE)) |&gt;\n  mutate(TOTAL_VRM = comma(TOTAL_VRM, digits = 0)) |&gt;\n  slice_max(TOTAL_VRM, n = 3) |&gt;\n  gt() |&gt;\n  tab_header(\n    title = \"Top 3 Transit Modes by Total VRM\"\n  )\n\n\n\n\n\n\n\nTop 3 Transit Modes by Total VRM\n\n\nMode\nTOTAL_VRM\n\n\n\n\nBus\n49,444,494,088\n\n\nDemand Response\n17,955,073,508\n\n\nHeavy Rail\n14,620,362,107\n\n\n\n\n\n\n\n\n\nQ3. How many trips were taken on the NYC Subway (Heavy Rail) in May 2024?\nThere were slightly over 180 million trips recorded on NYC Subway in May 2024.\n\n\n\n\n\n\n\n\nNYC Subway Trips in May'24\n\n\nTOTAL_TRIPS\n\n\n\n\n180,458,819\n\n\n\n\n\n\n\n\n\nQ5. How much did NYC subway ridership fall between April 2019 and April 2020?\nNYC subway ridership fell by 91% between April 2019 and April 2020 because of Covid pandemic.\n\n\n\n\n\n\n\n\nChange in NYC Subway Ridership\n\n\nAPR19_TRIPS\nAPR20_TRIPS\nPCT_CHANGE\n\n\n\n\n232,223,929\n20,254,269\n-91%"
  },
  {
    "objectID": "mp1.html#task-4---additional-analysis-of-transit-data.",
    "href": "mp1.html#task-4---additional-analysis-of-transit-data.",
    "title": "Mini-Project 1",
    "section": "Task 4 - Additional analysis of transit data.",
    "text": "Task 4 - Additional analysis of transit data."
  },
  {
    "objectID": "mp1.html#task-5---summary-data-for-2022.",
    "href": "mp1.html#task-5---summary-data-for-2022.",
    "title": "Mini-Project 1",
    "section": "Task 5 - Summary data for 2022.",
    "text": "Task 5 - Summary data for 2022.\nIn this part, I created a summary usage table for 2022 and joined it with available financial data."
  },
  {
    "objectID": "mp1.html#task-6---analysis-of-2022-data.",
    "href": "mp1.html#task-6---analysis-of-2022-data.",
    "title": "Mini-Project 1",
    "section": "Task 6 - Analysis of 2022 data.",
    "text": "Task 6 - Analysis of 2022 data.\n\nQ1. Which transit system (agency and mode) had the most UPT in 2022?\nNot surprisingly, NYC Subway had the largest volume of trips in 2022.\n\n\n\n\n\n\n\n\nTop 3 Transit Systems by UPT\n\n\n2022\n\n\nTRANSIT_SYSTEM\nUPT_TOTAL\n\n\n\n\nMTA New York City Transit_Heavy Rail\n1,793,073,801\n\n\nMTA New York City Transit_Bus\n458,602,305\n\n\nLos Angeles County Metropolitan Transportation Authority_Bus\n193,637,448\n\n\n\n\n\n\n\n\n\nQ2.Which transit system (agency and mode) had the highest farebox recovery, defined as the highest ratio of Total Fares to Expenses?\nIn 2022, ferryboat managed by Port Imperial Ferry Corp. had the highest farebox recovery ratio of 1.43.\n\n\n\n\n\n\n\n\nTop 3 Transit Systems by Farebox Recovery\n\n\n2022\n\n\nTRANSIT_SYSTEM\nFAREBOX_RECOVERY\n\n\n\n\nPort Imperial Ferry Corporation_Ferryboat\n1.43\n\n\nHyannis Harbor Tours, Inc._Ferryboat\n1.41\n\n\nTrans-Bridge Lines, Inc._Commuter Bus\n1.33\n\n\n\n\n\n\n\n\n\nQ3.Which transit system (agency and mode) has the lowest expenses per UPT?\nIn 2022, North Carolina State University Bus had the lowest expenses per UPT of $1.18 per unlinked passenger trip.\n\n\n\n\n\n\n\n\nTop 3 Transit Systems by Expenses per UPT\n\n\n2022\n\n\nTRANSIT_SYSTEM\nEXPENSES_PER_UPT\n\n\n\n\nNorth Carolina State University_Bus\n$1.18\n\n\nAnaheim Transportation Network_Bus\n$1.28\n\n\nUniversity of Iowa_Bus\n$1.54\n\n\n\n\n\n\n\n\n\nQ4.Which transit system (agency and mode) has the highest total fares per UPT?\nIn 2022, ferryboat managed by Cape May Lewes Ferry garnered the highest total fares per UPT of $9.23 per unlinked passenger trip.\n\n\n\n\n\n\n\n\nTop 3 Transit Systems by Fares per UPT\n\n\n2022\n\n\nTRANSIT_SYSTEM\nFARES_PER_UPT\n\n\n\n\nCape May Lewes Ferry_Ferryboat\n$9.23\n\n\nVirginia Railway Express_Commuter Rail\n$9.01\n\n\nPort Imperial Ferry Corporation_Ferryboat\n$8.90\n\n\n\n\n\n\n\n\n\nQ5.Which transit system (agency and mode) has the lowest expenses per VRM?\nIn 2022, Vanpool managed by Metropolitan Transportation Commission achieved the lowest expenses per VRM of $0.44 per vehicle revenue mile.\n\n\n\n\n\n\n\n\nTop 3 Transit Systems by Expenses per VRM\n\n\n2022\n\n\nTRANSIT_SYSTEM\nEXPENSES_PER_VRM\n\n\n\n\nMetropolitan Transportation Commission_Vanpool\n$0.44\n\n\nSan Joaquin Council_Vanpool\n$0.50\n\n\nSan Diego Association of Governments_Vanpool\n$0.54\n\n\n\n\n\n\n\n\n\nQ6.Which transit system (agency and mode) has the highest total fares per VRM?\nIn 2022, ferryboat managed by Cape May Lewes Ferry achieved higher fares per VRM than any other large transit system with UPT of at least 400,000.\n\n\n\n\n\n\n\n\nTop 3 Transit Systems by Fares per VRM\n\n\n2022\n\n\nTRANSIT_SYSTEM\nFARES_PER_VRM\n\n\n\n\nCape May Lewes Ferry_Ferryboat\n$93.01\n\n\nWoods Hole, Martha's Vineyard and Nantucket Steamship Authority_Ferryboat\n$91.68\n\n\nAnaheim Transportation Network_Bus\n$9.42\n\n\n\n\n\n\n\n\n\nBased on the farebox recovery ratio, Ferryboat managed by Port Imperial Ferry Corporation appeared to be the most efficient transit system in 2022 among large transit systems with total annual UPT of 400,000+."
  },
  {
    "objectID": "mp1.html#task-4---additional-findings.",
    "href": "mp1.html#task-4---additional-findings.",
    "title": "Mini-Project 1",
    "section": "Task 4 - Additional findings.",
    "text": "Task 4 - Additional findings.\n\nFor additional analysis, I took a deeper look at the NYC transit system data and discovered the following:\n\nBased on the share of UPT, subway has been, by far, the most popular mode of transportation. In any given year, its share of UPT is at least 2X of the second most used transit mode.\nMoreover, based on the changes in the share of UPT, NYC subway usage has been slowly increasing over the years. Between 2002 and 2023, it gained 9 percentage points in relative share, going from 68.1% of total to 76.6% of total, respectively.\nAt the same time, there has been a corresponding decrease in Bus trips. Between 2002 and 2023, it lost 10 percentage points in relative share, going from 31.9% of total to 21.6% of total, respectively.\nBus Rapid Transit and Commuter Bus are newer modes of transportation, with data on their usage not available until 2012.\n\n\n\n\n\n\n\n\n\nNYC Transit System - Relative Shares of UPT by Transportation Mode\n\n\nYEAR\nBus\nDemand Response\nHeavy Rail\nBus Rapid Transit\nCommuter Bus\n\n\n\n\n2002\n31.9%\n0.0%\n68.1%\nNA\nNA\n\n\n2003\n31.0%\n0.0%\n69.0%\nNA\nNA\n\n\n2004\n29.0%\n0.1%\n71.0%\nNA\nNA\n\n\n2005\n30.4%\n0.1%\n69.5%\nNA\nNA\n\n\n2006\n29.0%\n0.1%\n70.9%\nNA\nNA\n\n\n2007\n26.5%\n0.1%\n73.4%\nNA\nNA\n\n\n2008\n26.2%\n0.2%\n73.7%\nNA\nNA\n\n\n2009\n26.3%\n0.2%\n73.5%\nNA\nNA\n\n\n2010\n25.2%\n0.2%\n74.6%\nNA\nNA\n\n\n2011\n24.1%\n0.1%\n75.7%\nNA\nNA\n\n\n2012\n22.5%\n0.1%\n76.0%\n0.9%\n0.4%\n\n\n2013\n22.2%\n0.2%\n76.7%\n0.6%\n0.4%\n\n\n2014\n21.4%\n0.2%\n77.5%\n0.6%\n0.4%\n\n\n2015\n21.6%\n0.2%\n77.3%\n0.6%\n0.4%\n\n\n2016\n21.4%\n0.2%\n77.2%\n0.8%\n0.4%\n\n\n2017\n20.1%\n0.2%\n78.5%\n0.9%\n0.4%\n\n\n2018\n20.5%\n0.2%\n78.0%\n0.9%\n0.4%\n\n\n2019\n20.0%\n0.1%\n78.7%\n0.9%\n0.3%\n\n\n2020\n26.2%\n0.2%\n72.2%\n1.1%\n0.3%\n\n\n2021\n22.7%\n0.1%\n75.9%\n0.9%\n0.3%\n\n\n2022\n20.1%\n0.1%\n78.7%\n0.7%\n0.4%\n\n\n2023\n21.6%\n0.1%\n76.8%\n1.2%\n0.3%\n\n\n2024\n23.0%\n0.1%\n75.2%\n1.4%\n0.4%"
  },
  {
    "objectID": "mp01.html",
    "href": "mp01.html",
    "title": "Mini-Project 01: Fiscal Characteristics of Major US Public Transit Systems",
    "section": "",
    "text": "In this paper, we will look at high-level fiscal performance of US public transit systems. This work is not meant to be an in-depth analysis of the stated topic but rather an introductory, high-level overview. We will use data from the National Transit Database to analyze main indicators of usage and financial performance and determine what constitutes efficiency.\nData sources used and data availability and limitations are documented in detail in the assignment and could be accessed here."
  },
  {
    "objectID": "mp01.html#task-1-2---getting-data-ready-for-analysis.",
    "href": "mp01.html#task-1-2---getting-data-ready-for-analysis.",
    "title": "Mini-Project 01: Fiscal Characteristics of Major US Public Transit Systems",
    "section": "Task 1 & 2 - Getting data ready for analysis.",
    "text": "Task 1 & 2 - Getting data ready for analysis.\nIn this part, I created the base table for data analysis using the code provided in the assignment. I also modified column names (Task 1) and recoded the values in the ‘Mode’ column to make them easier to understand and use for analysis (Task 2). Please use the\n\n# Installing and loading libraries\n\nif (!require(\"tidyverse\")) install.packages(\"tidyverse\")\nlibrary(tidyverse)\nif (!require(\"DT\")) install.packages(\"DT\")\nlibrary(DT)\nif (!require(\"dplyr\")) install.packages(\"dplyr\")\nlibrary(dplyr)\n\n# Let's start with Fare Revenue\n\nFARES &lt;- readxl::read_xlsx(\"2022_fare_revenue.xlsx\") |&gt;\n  select(\n    -`State/Parent NTD ID`,\n    -`Reporter Type`,\n    -`Reporting Module`,\n    -`TOS`,\n    -`Passenger Paid Fares`,\n    -`Organization Paid Fares`\n  ) |&gt;\n  filter(`Expense Type` == \"Funds Earned During Period\") |&gt;\n  select(-`Expense Type`) |&gt;\n  group_by(\n    `NTD ID`, # Sum over different `TOS` for the same `Mode`\n    `Agency Name`, # These are direct operated and sub-contracted\n    `Mode`\n  ) |&gt; # of the same transit modality\n  # Not a big effect in most munis (significant DO\n  # tends to get rid of sub-contractors), but we'll sum\n  # to unify different passenger experiences\n  summarize(`Total Fares` = sum(`Total Fares`)) |&gt;\n  ungroup()\n\n# Next, expenses\n\nEXPENSES &lt;- readr::read_csv(\"2022_expenses.csv\") |&gt;\n  select(\n    `NTD ID`,\n    `Agency`,\n    `Total`,\n    `Mode`\n  ) |&gt;\n  mutate(`NTD ID` = as.integer(`NTD ID`)) |&gt;\n  rename(Expenses = Total) |&gt;\n  group_by(`NTD ID`, `Mode`) |&gt;\n  summarize(Expenses = sum(Expenses)) |&gt;\n  ungroup()\n\nFINANCIALS &lt;- inner_join(FARES, EXPENSES, join_by(`NTD ID`, `Mode`))\n\n# Monthly Transit Numbers\n\nTRIPS &lt;- readxl::read_xlsx(\"ridership.xlsx\", sheet = \"UPT\") |&gt;\n  filter(`Mode/Type of Service Status` == \"Active\") |&gt;\n  select(\n    -`Legacy NTD ID`,\n    -`Reporter Type`,\n    -`Mode/Type of Service Status`,\n    -`UACE CD`,\n    -`TOS`\n  ) |&gt;\n  pivot_longer(-c(`NTD ID`:`3 Mode`),\n    names_to = \"Month\",\n    values_to = \"UPT\"\n  ) |&gt;\n  drop_na() |&gt;\n  mutate(Month = my(Month)) # Parse _m_onth _y_ear date specs\n\nMILES &lt;- readxl::read_xlsx(\"ridership.xlsx\", sheet = \"VRM\") |&gt;\n  filter(`Mode/Type of Service Status` == \"Active\") |&gt;\n  select(\n    -`Legacy NTD ID`,\n    -`Reporter Type`,\n    -`Mode/Type of Service Status`,\n    -`UACE CD`,\n    -`TOS`\n  ) |&gt;\n  pivot_longer(-c(`NTD ID`:`3 Mode`),\n    names_to = \"Month\",\n    values_to = \"VRM\"\n  ) |&gt;\n  drop_na() |&gt;\n  group_by(\n    `NTD ID`, `Agency`, `UZA Name`,\n    `Mode`, `3 Mode`, Month\n  ) |&gt;\n  summarize(VRM = sum(VRM)) |&gt;\n  ungroup() |&gt;\n  mutate(Month = my(Month)) # Parse _m_onth _y_ear date specs\n\nUSAGE &lt;- inner_join(TRIPS, MILES) |&gt;\n  mutate(`NTD ID` = as.integer(`NTD ID`))\n\n## Task 1 - Creating syntatic names\n\nnames(USAGE)[3] &lt;- \"Metro_Area\"\n\n## Task 2 - Recoding the Mode column\n\nUSAGE &lt;- USAGE |&gt;\n  mutate(Mode = case_when(\n    Mode == \"HR\" ~ \"Heavy Rail\",\n    Mode == \"DR\" ~ \"Demand Response\",\n    Mode == \"FB\" ~ \"Ferryboat\",\n    Mode == \"MB\" ~ \"Bus\",\n    Mode == \"SR\" ~ \"Streetcar Rail\",\n    Mode == \"TB\" ~ \"Trolleybus\",\n    Mode == \"VP\" ~ \"Vanpool\",\n    Mode == \"CB\" ~ \"Commuter Bus\",\n    Mode == \"RB\" ~ \"Bus Rapid Transit\",\n    Mode == \"LR\" ~ \"Light Rail\",\n    Mode == \"YR\" ~ \"Hybrid Rail\",\n    Mode == \"MG\" ~ \"Monorail Automated Guideway\",\n    Mode == \"CR\" ~ \"Commuter Rail\",\n    Mode == \"AR\" ~ \"Alaska Railroad\",\n    Mode == \"TR\" ~ \"Aerial Tramway\",\n    Mode == \"IP\" ~ \"Inclined Plane\",\n    Mode == \"PB\" ~ \"Publico\",\n    Mode == \"CC\" ~ \"Cable Car\",\n    TRUE ~ \"Unknown\"\n  ))\n\n\nsample_n(USAGE, 100) |&gt;\n  mutate(Month = as.character(Month)) |&gt;\n  DT::datatable(\n    filter='top'\n  )"
  },
  {
    "objectID": "mp01.html#task-3---analyzing-transit-data.",
    "href": "mp01.html#task-3---analyzing-transit-data.",
    "title": "Mini-Project 01: Fiscal Characteristics of Major US Public Transit Systems",
    "section": "Task 3 - Analyzing transit data.",
    "text": "Task 3 - Analyzing transit data.\n\nQ1. What transit agency had the most total VRM in this dataset?\nNot surprisingly, MTA New York City Transit has the largest total mileage in this dataset. Its total of 10.8B+ trips is almost double of the amount attributed to New Jersey Transit Corporation, the agency with the second largest result.\n\n# installing and loading additional libraries\n\nif (!require(\"formattable\")) install.packages(\"formattable\")\nlibrary(formattable)\nif (!require(\"gt\")) install.packages(\"gt\")\nlibrary(gt)\n\nUSAGE |&gt;\n  group_by(Agency) |&gt;\n  summarize(TOTAL_VRM = sum(VRM, na.rm = TRUE)) |&gt;\n  mutate(TOTAL_VRM = comma(TOTAL_VRM, digits = 0)) |&gt;\n  slice_max(TOTAL_VRM, n = 3) |&gt;\n  gt() |&gt;\n  tab_header(\n    title = \"Top 3 Transit Agencies by Total VRM\"\n  )\n\n\n\n\n\n\n\nTop 3 Transit Agencies by Total VRM\n\n\nAgency\nTOTAL_VRM\n\n\n\n\nMTA New York City Transit\n10,832,855,350\n\n\nNew Jersey Transit Corporation\n5,645,525,525\n\n\nLos Angeles County Metropolitan Transportation Authority\n4,354,016,659\n\n\n\n\n\n\n\n\n\nQ2. What transit mode had the most total VRM in this dataset?\nWith over 49 billion miles, bus has the most total VRM in this dataset.\n\nUSAGE |&gt;\n  group_by(Mode) |&gt;\n  summarize(TOTAL_VRM = sum(VRM, na.rm = TRUE)) |&gt;\n  mutate(TOTAL_VRM = comma(TOTAL_VRM, digits = 0)) |&gt;\n  slice_max(TOTAL_VRM, n = 3) |&gt;\n  gt() |&gt;\n  tab_header(\n    title = \"Top 3 Transit Modes by Total VRM\"\n  )\n\n\n\n\n\n\n\nTop 3 Transit Modes by Total VRM\n\n\nMode\nTOTAL_VRM\n\n\n\n\nBus\n49,444,494,088\n\n\nDemand Response\n17,955,073,508\n\n\nHeavy Rail\n14,620,362,107\n\n\n\n\n\n\n\n\n\nQ3. How many trips were taken on the NYC Subway (Heavy Rail) in May 2024?\nThere were slightly over 180 million trips recorded on NYC Subway in May 2024.\n\nUSAGE |&gt;\n  dplyr::filter(\n    Mode == \"Heavy Rail\",\n    Agency == \"MTA New York City Transit\",\n    Month == \"2024-05-01\"\n  ) |&gt;\n  summarize(TOTAL_TRIPS = sum(UPT, na.rm = TRUE)) |&gt;\n  mutate(TOTAL_TRIPS = comma(TOTAL_TRIPS, digits = 0)) |&gt;\n  gt() |&gt;\n  tab_header(\n    title = \"NYC Subway Trips in May'24\"\n  )\n\n\n\n\n\n\n\nNYC Subway Trips in May'24\n\n\nTOTAL_TRIPS\n\n\n\n\n180,458,819\n\n\n\n\n\n\n\n\n\nQ5. How much did NYC subway ridership fall between April 2019 and April 2020?\nNYC subway ridership fell by 91% between April 2019 and April 2020 because of Covid pandemic.\n\nUSAGE |&gt;\n  filter(Agency == \"MTA New York City Transit\" & Mode == \"Heavy Rail\") |&gt;\n  summarise(\n    APR19_TRIPS = sum(dplyr::case_when(Month == \"2019-04-01\" ~ UPT, TRUE ~ 0), na.rm = TRUE),\n    APR20_TRIPS = sum(dplyr::case_when(Month == \"2020-04-01\" ~ UPT, TRUE ~ 0), na.rm = TRUE),\n    PCT_CHANGE = (APR20_TRIPS - APR19_TRIPS) / APR19_TRIPS\n  ) |&gt;\n  mutate(\n    PCT_CHANGE = scales::percent(PCT_CHANGE),\n    APR19_TRIPS = comma(APR19_TRIPS, digits = 0),\n    APR20_TRIPS = comma(APR20_TRIPS, digits = 0)\n  ) |&gt;\n  gt() |&gt;\n  tab_header(\n    title = \"Change in NYC Subway Ridership\"\n  )\n\n\n\n\n\n\n\nChange in NYC Subway Ridership\n\n\nAPR19_TRIPS\nAPR20_TRIPS\nPCT_CHANGE\n\n\n\n\n232,223,929\n20,254,269\n-91%"
  },
  {
    "objectID": "mp01.html#task-4---additional-findings.",
    "href": "mp01.html#task-4---additional-findings.",
    "title": "Mini-Project 01: Fiscal Characteristics of Major US Public Transit Systems",
    "section": "Task 4 - Additional findings.",
    "text": "Task 4 - Additional findings.\n\nFor additional analysis, I took a deeper look at the NYC transit system data and discovered the following:\n\nBased on the share of UPT, subway has been, by far, the most popular mode of transportation. In any given year, its share of UPT is at least 2X of the second most used transit mode.\nMoreover, based on the changes in the share of UPT, NYC subway usage has been slowly increasing over the years. Between 2002 and 2023, it gained 9 percentage points in relative share, going from 68.1% of total to 76.6% of total, respectively.\nAt the same time, there has been a corresponding decrease in Bus trips. Between 2002 and 2023, it lost 10 percentage points in relative share, going from 31.9% of total to 21.6% of total, respectively.\nBus Rapid Transit and Commuter Bus are newer modes of transportation, with data on their usage not available until 2012.\n\n\n# create df with annual totals\n\nnyc_annual_df &lt;- USAGE |&gt;\n  mutate(YEAR = format(as.Date(Month), \"%Y\")) |&gt;\n  dplyr::filter(Agency == \"MTA New York City Transit\") |&gt;\n  group_by(YEAR) |&gt;\n  summarize(TOTAL_TRIPS_ALL = sum(UPT, na.rm = TRUE)) |&gt;\n  ungroup()\n\n# create df with annual totals by mode\n\nnyc_mode_df &lt;- USAGE |&gt;\n  mutate(YEAR = format(as.Date(Month), \"%Y\")) |&gt;\n  dplyr::filter(Agency == \"MTA New York City Transit\") |&gt;\n  group_by(YEAR, Mode) |&gt;\n  summarize(TOTAL_TRIPS = sum(UPT, na.rm = TRUE)) |&gt;\n  ungroup()\n\n# join 2 dfs and calculate shares by mode\n\nnyc_joined_df &lt;- nyc_mode_df |&gt;\n  left_join(nyc_annual_df, by = \"YEAR\")\n\nnyc_joined_df2 &lt;- nyc_joined_df |&gt;\n  mutate(SHARE = TOTAL_TRIPS / TOTAL_TRIPS_ALL) |&gt;\n  mutate(SHARE = scales::percent(SHARE, accuracy = 0.1)) |&gt;\n  select(-TOTAL_TRIPS, -TOTAL_TRIPS_ALL)\n\n# pivot wide\n\nnyc_mode_df_pivoted &lt;- pivot_wider(nyc_joined_df2,\n  id_cols = YEAR,\n  names_from = Mode,\n  values_from = SHARE\n)\n\nnyc_mode_df_pivoted |&gt;\n  gt() |&gt;\n  tab_header(\n    title = \"NYC Transit System - Relative Shares of UPT by Transportation Mode\"\n  )\n\n\n\n\n\n\n\nNYC Transit System - Relative Shares of UPT by Transportation Mode\n\n\nYEAR\nBus\nDemand Response\nHeavy Rail\nBus Rapid Transit\nCommuter Bus\n\n\n\n\n2002\n31.9%\n0.0%\n68.1%\nNA\nNA\n\n\n2003\n31.0%\n0.0%\n69.0%\nNA\nNA\n\n\n2004\n29.0%\n0.1%\n71.0%\nNA\nNA\n\n\n2005\n30.4%\n0.1%\n69.5%\nNA\nNA\n\n\n2006\n29.0%\n0.1%\n70.9%\nNA\nNA\n\n\n2007\n26.5%\n0.1%\n73.4%\nNA\nNA\n\n\n2008\n26.2%\n0.2%\n73.7%\nNA\nNA\n\n\n2009\n26.3%\n0.2%\n73.5%\nNA\nNA\n\n\n2010\n25.2%\n0.2%\n74.6%\nNA\nNA\n\n\n2011\n24.1%\n0.1%\n75.7%\nNA\nNA\n\n\n2012\n22.5%\n0.1%\n76.0%\n0.9%\n0.4%\n\n\n2013\n22.2%\n0.2%\n76.7%\n0.6%\n0.4%\n\n\n2014\n21.4%\n0.2%\n77.5%\n0.6%\n0.4%\n\n\n2015\n21.6%\n0.2%\n77.3%\n0.6%\n0.4%\n\n\n2016\n21.4%\n0.2%\n77.2%\n0.8%\n0.4%\n\n\n2017\n20.1%\n0.2%\n78.5%\n0.9%\n0.4%\n\n\n2018\n20.5%\n0.2%\n78.0%\n0.9%\n0.4%\n\n\n2019\n20.0%\n0.1%\n78.7%\n0.9%\n0.3%\n\n\n2020\n26.2%\n0.2%\n72.2%\n1.1%\n0.3%\n\n\n2021\n22.7%\n0.1%\n75.9%\n0.9%\n0.3%\n\n\n2022\n20.1%\n0.1%\n78.7%\n0.7%\n0.4%\n\n\n2023\n21.6%\n0.1%\n76.8%\n1.2%\n0.3%\n\n\n2024\n23.0%\n0.1%\n75.2%\n1.4%\n0.4%"
  },
  {
    "objectID": "mp01.html#task-5---summary-data-for-2022.",
    "href": "mp01.html#task-5---summary-data-for-2022.",
    "title": "Mini-Project 01: Fiscal Characteristics of Major US Public Transit Systems",
    "section": "Task 5 - Summary data for 2022.",
    "text": "Task 5 - Summary data for 2022.\nIn this part, I created a summary usage table for 2022 and joined it with available financial data.\n\n### 2022 table\n\nUSAGE_2022_ANNUAL &lt;- USAGE |&gt;\n  select(\n    `NTD ID`,\n    Agency,\n    Metro_Area,\n    Mode,\n    UPT,\n    VRM,\n    Month\n  ) |&gt;\n  filter(year(Month) == \"2022\") |&gt;\n  group_by(\n    `NTD ID`,\n    Agency,\n    Metro_Area,\n    Mode\n  ) |&gt;\n  summarise(\n    TOTAL_VRM = sum(VRM, na.rm = TRUE),\n    TOTAL_UPT = sum(UPT, na.rm = TRUE)\n  ) |&gt;\n  ungroup()\n\n# recode modes values\n\nFINANCIALS2 &lt;- FINANCIALS |&gt;\n  mutate(Mode = case_when(\n    Mode == \"HR\" ~ \"Heavy Rail\",\n    Mode == \"DR\" ~ \"Demand Response\",\n    Mode == \"FB\" ~ \"Ferryboat\",\n    Mode == \"MB\" ~ \"Bus\",\n    Mode == \"SR\" ~ \"Streetcar Rail\",\n    Mode == \"TB\" ~ \"Trolleybus\",\n    Mode == \"VP\" ~ \"Vanpool\",\n    Mode == \"CB\" ~ \"Commuter Bus\",\n    Mode == \"RB\" ~ \"Bus Rapid Transit\",\n    Mode == \"LR\" ~ \"Light Rail\",\n    Mode == \"YR\" ~ \"Hybrid Rail\",\n    Mode == \"MG\" ~ \"Monorail Automated Guideway\",\n    Mode == \"CR\" ~ \"Commuter Rail\",\n    Mode == \"AR\" ~ \"Alaska Railroad\",\n    Mode == \"TR\" ~ \"Aerial Tramway\",\n    Mode == \"IP\" ~ \"Inclined Plane\",\n    Mode == \"PB\" ~ \"Publico\",\n    Mode == \"CC\" ~ \"Cable Car\",\n    TRUE ~ \"Unknown\"\n  ))\n\n\nUSAGE_AND_FINANCIALS &lt;- left_join(\n  USAGE_2022_ANNUAL,\n  FINANCIALS2,\n  join_by(`NTD ID`, Mode)\n) |&gt;\n  drop_na()\n\n\nsample_n(USAGE_AND_FINANCIALS, 1132) |&gt;\n  DT::datatable()"
  },
  {
    "objectID": "mp01.html#task-6---analysis-of-2022-data.",
    "href": "mp01.html#task-6---analysis-of-2022-data.",
    "title": "Mini-Project 01: Fiscal Characteristics of Major US Public Transit Systems",
    "section": "Task 6 - Analysis of 2022 data.",
    "text": "Task 6 - Analysis of 2022 data.\n\nQ1. Which transit system (agency and mode) had the most UPT in 2022?\nNot surprisingly, NYC Subway had the largest volume of trips in 2022.\n\nUSAGE_AND_FINANCIALS |&gt;\n  unite(TRANSIT_SYSTEM, c(\"Agency\", \"Mode\")) |&gt;\n  group_by(TRANSIT_SYSTEM) |&gt;\n  summarise(UPT_TOTAL = sum(TOTAL_UPT)) |&gt;\n  mutate(UPT_TOTAL = comma(UPT_TOTAL, digits = 0)) |&gt;\n  slice_max(UPT_TOTAL, n = 3) |&gt;\n  gt() |&gt;\n  tab_header(\n    title = \"Top 3 Transit Systems by UPT\",\n    subtitle = \"2022\"\n  )\n\n\n\n\n\n\n\nTop 3 Transit Systems by UPT\n\n\n2022\n\n\nTRANSIT_SYSTEM\nUPT_TOTAL\n\n\n\n\nMTA New York City Transit_Heavy Rail\n1,793,073,801\n\n\nMTA New York City Transit_Bus\n458,602,305\n\n\nLos Angeles County Metropolitan Transportation Authority_Bus\n193,637,448\n\n\n\n\n\n\n\n\n\nQ2.Which transit system (agency and mode) had the highest farebox recovery, defined as the highest ratio of Total Fares to Expenses?\nIn 2022, ferryboat managed by Port Imperial Ferry Corp. had the highest farebox recovery ratio of 1.43.\n\nUSAGE_AND_FINANCIALS |&gt;\n  unite(TRANSIT_SYSTEM, c(\"Agency\", \"Mode\")) |&gt;\n  group_by(TRANSIT_SYSTEM) |&gt;\n  filter(sum(TOTAL_UPT, na.rm = TRUE) &gt;= 400000) |&gt;\n  summarise(FAREBOX_RECOVERY = sum(`Total Fares`, na.rm = TRUE) / sum(Expenses, na.rm = TRUE)) |&gt;\n  mutate(FAREBOX_RECOVERY = comma(FAREBOX_RECOVERY, digits = 2)) |&gt;\n  ungroup() |&gt;\n  slice_max(FAREBOX_RECOVERY, n = 3) |&gt;\n  gt() |&gt;\n  tab_header(\n    title = \"Top 3 Transit Systems by Farebox Recovery\",\n    subtitle = \"2022\"\n  )\n\n\n\n\n\n\n\nTop 3 Transit Systems by Farebox Recovery\n\n\n2022\n\n\nTRANSIT_SYSTEM\nFAREBOX_RECOVERY\n\n\n\n\nPort Imperial Ferry Corporation_Ferryboat\n1.43\n\n\nHyannis Harbor Tours, Inc._Ferryboat\n1.41\n\n\nTrans-Bridge Lines, Inc._Commuter Bus\n1.33\n\n\n\n\n\n\n\n\n\nQ3.Which transit system (agency and mode) has the lowest expenses per UPT?\nIn 2022, North Carolina State University Bus had the lowest expenses per UPT of $1.18 per unlinked passenger trip.\n\nUSAGE_AND_FINANCIALS |&gt;\n  unite(TRANSIT_SYSTEM, c(\"Agency\", \"Mode\")) |&gt;\n  group_by(TRANSIT_SYSTEM) |&gt;\n  filter(sum(TOTAL_UPT, na.rm = TRUE) &gt;= 400000) |&gt;\n  summarise(EXPENSES_PER_UPT = sum(Expenses, na.rm = TRUE) / sum(TOTAL_UPT, na.rm = TRUE)) |&gt;\n  mutate(EXPENSES_PER_UPT = scales::dollar(EXPENSES_PER_UPT)) |&gt;\n  ungroup() |&gt;\n  slice_min(EXPENSES_PER_UPT, n = 3) |&gt;\n  gt() |&gt;\n  tab_header(\n    title = \"Top 3 Transit Systems by Expenses per UPT\",\n    subtitle = \"2022\"\n  )\n\n\n\n\n\n\n\nTop 3 Transit Systems by Expenses per UPT\n\n\n2022\n\n\nTRANSIT_SYSTEM\nEXPENSES_PER_UPT\n\n\n\n\nNorth Carolina State University_Bus\n$1.18\n\n\nAnaheim Transportation Network_Bus\n$1.28\n\n\nUniversity of Iowa_Bus\n$1.54\n\n\n\n\n\n\n\n\n\nQ4.Which transit system (agency and mode) has the highest total fares per UPT?\nIn 2022, ferryboat managed by Cape May Lewes Ferry garnered the highest total fares per UPT of $9.23 per unlinked passenger trip.\n\nUSAGE_AND_FINANCIALS |&gt;\n  unite(TRANSIT_SYSTEM, c(\"Agency\", \"Mode\")) |&gt;\n  group_by(TRANSIT_SYSTEM) |&gt;\n  filter(sum(TOTAL_UPT, na.rm = TRUE) &gt;= 400000) |&gt;\n  summarise(FARES_PER_UPT = sum(`Total Fares`, na.rm = TRUE) / sum(TOTAL_UPT, na.rm = TRUE)) |&gt;\n  mutate(FARES_PER_UPT = scales::dollar(FARES_PER_UPT)) |&gt;\n  ungroup() |&gt;\n  slice_max(FARES_PER_UPT, n = 3) |&gt;\n  gt() |&gt;\n  tab_header(\n    title = \"Top 3 Transit Systems by Fares per UPT\",\n    subtitle = \"2022\"\n  )\n\n\n\n\n\n\n\nTop 3 Transit Systems by Fares per UPT\n\n\n2022\n\n\nTRANSIT_SYSTEM\nFARES_PER_UPT\n\n\n\n\nCape May Lewes Ferry_Ferryboat\n$9.23\n\n\nVirginia Railway Express_Commuter Rail\n$9.01\n\n\nPort Imperial Ferry Corporation_Ferryboat\n$8.90\n\n\n\n\n\n\n\n\n\nQ5.Which transit system (agency and mode) has the lowest expenses per VRM?\nIn 2022, Vanpool managed by Metropolitan Transportation Commission achieved the lowest expenses per VRM of $0.44 per vehicle revenue mile.\n\nUSAGE_AND_FINANCIALS |&gt;\n  unite(TRANSIT_SYSTEM, c(\"Agency\", \"Mode\")) |&gt;\n  group_by(TRANSIT_SYSTEM) |&gt;\n  filter(sum(TOTAL_UPT, na.rm = TRUE) &gt;= 400000) |&gt;\n  summarise(EXPENSES_PER_VRM = sum(Expenses, na.rm = TRUE) / sum(TOTAL_VRM, na.rm = TRUE)) |&gt;\n  mutate(EXPENSES_PER_VRM = scales::dollar(EXPENSES_PER_VRM)) |&gt;\n  ungroup() |&gt;\n  slice_min(EXPENSES_PER_VRM, n = 3) |&gt;\n  gt() |&gt;\n  tab_header(\n    title = \"Top 3 Transit Systems by Expenses per VRM\",\n    subtitle = \"2022\"\n  )\n\n\n\n\n\n\n\nTop 3 Transit Systems by Expenses per VRM\n\n\n2022\n\n\nTRANSIT_SYSTEM\nEXPENSES_PER_VRM\n\n\n\n\nMetropolitan Transportation Commission_Vanpool\n$0.44\n\n\nSan Joaquin Council_Vanpool\n$0.50\n\n\nSan Diego Association of Governments_Vanpool\n$0.54\n\n\n\n\n\n\n\n\n\nQ6.Which transit system (agency and mode) has the highest total fares per VRM?\nIn 2022, ferryboat managed by Cape May Lewes Ferry achieved higher fares per VRM than any other large transit system with UPT of at least 400,000.\n\nUSAGE_AND_FINANCIALS |&gt;\n  unite(TRANSIT_SYSTEM, c(\"Agency\", \"Mode\")) |&gt;\n  group_by(TRANSIT_SYSTEM) |&gt;\n  filter(sum(TOTAL_UPT, na.rm = TRUE) &gt;= 400000) |&gt;\n  summarise(FARES_PER_VRM = sum(`Total Fares`, na.rm = TRUE) / sum(TOTAL_VRM, na.rm = TRUE)) |&gt;\n  mutate(FARES_PER_VRM = scales::dollar(FARES_PER_VRM)) |&gt;\n  ungroup() |&gt;\n  slice_max(FARES_PER_VRM, n = 3) |&gt;\n  gt() |&gt;\n  tab_header(\n    title = \"Top 3 Transit Systems by Fares per VRM\",\n    subtitle = \"2022\"\n  )\n\n\n\n\n\n\n\nTop 3 Transit Systems by Fares per VRM\n\n\n2022\n\n\nTRANSIT_SYSTEM\nFARES_PER_VRM\n\n\n\n\nCape May Lewes Ferry_Ferryboat\n$93.01\n\n\nWoods Hole, Martha's Vineyard and Nantucket Steamship Authority_Ferryboat\n$91.68\n\n\nAnaheim Transportation Network_Bus\n$9.42\n\n\n\n\n\n\n\n\n\nBased on the farebox recovery ratio, Ferryboat managed by Port Imperial Ferry Corporation appeared to be the most efficient transit system in 2022 among large transit systems with total annual UPT of 400,000+."
  },
  {
    "objectID": "mp01.html#data-preparation",
    "href": "mp01.html#data-preparation",
    "title": "Mini-Project 01: Fiscal Characteristics of Major US Public Transit Systems",
    "section": "Data Preparation",
    "text": "Data Preparation\nIn this part, I created the base table for data analysis using the code provided in the assignment. I also modified column names (per Task 1) and recoded the values in the ‘Mode’ column to make them easier to understand and use for analysis (per Task 2). The base table is provided for review after the code block (please note NTD ID and 3 Modes columns are excluded from the preview).\n\n# Installing and loading libraries\n\nif (!require(\"tidyverse\")) install.packages(\"tidyverse\")\nlibrary(tidyverse)\nif (!require(\"DT\")) install.packages(\"DT\")\nlibrary(DT)\nif (!require(\"dplyr\")) install.packages(\"dplyr\")\nlibrary(dplyr)\n\n# Let's start with Fare Revenue\n\nFARES &lt;- readxl::read_xlsx(\"2022_fare_revenue.xlsx\") |&gt;\n  select(\n    -`State/Parent NTD ID`,\n    -`Reporter Type`,\n    -`Reporting Module`,\n    -`TOS`,\n    -`Passenger Paid Fares`,\n    -`Organization Paid Fares`\n  ) |&gt;\n  filter(`Expense Type` == \"Funds Earned During Period\") |&gt;\n  select(-`Expense Type`) |&gt;\n  group_by(\n    `NTD ID`, # Sum over different `TOS` for the same `Mode`\n    `Agency Name`, # These are direct operated and sub-contracted\n    `Mode`\n  ) |&gt; # of the same transit modality\n  # Not a big effect in most munis (significant DO\n  # tends to get rid of sub-contractors), but we'll sum\n  # to unify different passenger experiences\n  summarize(`Total Fares` = sum(`Total Fares`)) |&gt;\n  ungroup()\n\n# Next, expenses\n\nEXPENSES &lt;- readr::read_csv(\"2022_expenses.csv\") |&gt;\n  select(\n    `NTD ID`,\n    `Agency`,\n    `Total`,\n    `Mode`\n  ) |&gt;\n  mutate(`NTD ID` = as.integer(`NTD ID`)) |&gt;\n  rename(Expenses = Total) |&gt;\n  group_by(`NTD ID`, `Mode`) |&gt;\n  summarize(Expenses = sum(Expenses)) |&gt;\n  ungroup()\n\nFINANCIALS &lt;- inner_join(FARES, EXPENSES, join_by(`NTD ID`, `Mode`))\n\n# Monthly Transit Numbers\n\nTRIPS &lt;- readxl::read_xlsx(\"ridership.xlsx\", sheet = \"UPT\") |&gt;\n  filter(`Mode/Type of Service Status` == \"Active\") |&gt;\n  select(\n    -`Legacy NTD ID`,\n    -`Reporter Type`,\n    -`Mode/Type of Service Status`,\n    -`UACE CD`,\n    -`TOS`\n  ) |&gt;\n  pivot_longer(-c(`NTD ID`:`3 Mode`),\n    names_to = \"Month\",\n    values_to = \"UPT\"\n  ) |&gt;\n  drop_na() |&gt;\n  mutate(Month = my(Month)) # Parse _m_onth _y_ear date specs\n\nMILES &lt;- readxl::read_xlsx(\"ridership.xlsx\", sheet = \"VRM\") |&gt;\n  filter(`Mode/Type of Service Status` == \"Active\") |&gt;\n  select(\n    -`Legacy NTD ID`,\n    -`Reporter Type`,\n    -`Mode/Type of Service Status`,\n    -`UACE CD`,\n    -`TOS`\n  ) |&gt;\n  pivot_longer(-c(`NTD ID`:`3 Mode`),\n    names_to = \"Month\",\n    values_to = \"VRM\"\n  ) |&gt;\n  drop_na() |&gt;\n  group_by(\n    `NTD ID`, `Agency`, `UZA Name`,\n    `Mode`, `3 Mode`, Month\n  ) |&gt;\n  summarize(VRM = sum(VRM)) |&gt;\n  ungroup() |&gt;\n  mutate(Month = my(Month)) # Parse _m_onth _y_ear date specs\n\nUSAGE &lt;- inner_join(TRIPS, MILES) |&gt;\n  mutate(`NTD ID` = as.integer(`NTD ID`))\n\n## Task 1 - Creating syntatic names\n\nnames(USAGE)[3] &lt;- \"Metro_Area\"\n\n## Task 2 - Recoding the Mode column\n\nUSAGE &lt;- USAGE |&gt;\n  mutate(Mode = case_when(\n    Mode == \"HR\" ~ \"Heavy Rail\",\n    Mode == \"DR\" ~ \"Demand Response\",\n    Mode == \"FB\" ~ \"Ferryboat\",\n    Mode == \"MB\" ~ \"Bus\",\n    Mode == \"SR\" ~ \"Streetcar Rail\",\n    Mode == \"TB\" ~ \"Trolleybus\",\n    Mode == \"VP\" ~ \"Vanpool\",\n    Mode == \"CB\" ~ \"Commuter Bus\",\n    Mode == \"RB\" ~ \"Bus Rapid Transit\",\n    Mode == \"LR\" ~ \"Light Rail\",\n    Mode == \"YR\" ~ \"Hybrid Rail\",\n    Mode == \"MG\" ~ \"Monorail Automated Guideway\",\n    Mode == \"CR\" ~ \"Commuter Rail\",\n    Mode == \"AR\" ~ \"Alaska Railroad\",\n    Mode == \"TR\" ~ \"Aerial Tramway\",\n    Mode == \"IP\" ~ \"Inclined Plane\",\n    Mode == \"PB\" ~ \"Publico\",\n    Mode == \"CC\" ~ \"Cable Car\",\n    TRUE ~ \"Unknown\"\n  ))\n\n# base table sampled\n\nsample_n(USAGE, 1000) |&gt;\n  select(-`NTD ID`, -`3 Mode`) |&gt;\n  mutate(Month = as.character(Month)) |&gt;\n  DT::datatable()"
  },
  {
    "objectID": "mp01.html#initial-analysys-of-transit-data",
    "href": "mp01.html#initial-analysys-of-transit-data",
    "title": "Mini-Project 01: Fiscal Characteristics of Major US Public Transit Systems",
    "section": "Initial analysys of transit data",
    "text": "Initial analysys of transit data\nIn this part, I conducted the initial analysis of transit data by addressing 5 questions provided in Task 3.\n\nQ1. What transit agency had the most total VRM in this dataset?\nNot surprisingly, MTA New York City Transit has the largest total mileage in this dataset. Its total of 10.8B+ trips is almost double of the amount attributed to New Jersey Transit Corporation, the agency with the second largest result.\n\n\n\n\n\n\n\n\nTop 3 Transit Agencies by Total VRM\n\n\nAgency\nTOTAL_VRM\n\n\n\n\nMTA New York City Transit\n10,832,855,350\n\n\nNew Jersey Transit Corporation\n5,645,525,525\n\n\nLos Angeles County Metropolitan Transportation Authority\n4,354,016,659\n\n\n\n\n\n\n\n\n# installing and loading additional libraries\n\nif (!require(\"formattable\")) install.packages(\"formattable\")\nlibrary(formattable)\nif (!require(\"gt\")) install.packages(\"gt\")\nlibrary(gt)\n\nUSAGE |&gt;\n  group_by(Agency) |&gt;\n  summarize(TOTAL_VRM = sum(VRM, na.rm = TRUE)) |&gt;\n  mutate(TOTAL_VRM = comma(TOTAL_VRM, digits = 0)) |&gt;\n  slice_max(TOTAL_VRM, n = 3) |&gt;\n  gt() |&gt;\n  tab_header(\n    title = \"Top 3 Transit Agencies by Total VRM\"\n  )\n\n\n\n\n\n\n\nTop 3 Transit Agencies by Total VRM\n\n\nAgency\nTOTAL_VRM\n\n\n\n\nMTA New York City Transit\n10,832,855,350\n\n\nNew Jersey Transit Corporation\n5,645,525,525\n\n\nLos Angeles County Metropolitan Transportation Authority\n4,354,016,659\n\n\n\n\n\n\n\n\n\nQ2. What transit mode had the most total VRM in this dataset?\nWith over 49 billion miles, bus has the most total VRM in this dataset.\n\nUSAGE |&gt;\n  group_by(Mode) |&gt;\n  summarize(TOTAL_VRM = sum(VRM, na.rm = TRUE)) |&gt;\n  mutate(TOTAL_VRM = comma(TOTAL_VRM, digits = 0)) |&gt;\n  slice_max(TOTAL_VRM, n = 3) |&gt;\n  gt() |&gt;\n  tab_header(\n    title = \"Top 3 Transit Modes by Total VRM\"\n  )\n\n\n\n\n\n\n\nTop 3 Transit Modes by Total VRM\n\n\nMode\nTOTAL_VRM\n\n\n\n\nBus\n49,444,494,088\n\n\nDemand Response\n17,955,073,508\n\n\nHeavy Rail\n14,620,362,107\n\n\n\n\n\n\n\n\n\nQ3. How many trips were taken on the NYC Subway (Heavy Rail) in May 2024?\nThere were slightly over 180 million trips recorded on NYC Subway in May 2024.\n\nUSAGE |&gt;\n  dplyr::filter(\n    Mode == \"Heavy Rail\",\n    Agency == \"MTA New York City Transit\",\n    Month == \"2024-05-01\"\n  ) |&gt;\n  summarize(TOTAL_TRIPS = sum(UPT, na.rm = TRUE)) |&gt;\n  mutate(TOTAL_TRIPS = comma(TOTAL_TRIPS, digits = 0)) |&gt;\n  gt() |&gt;\n  tab_header(\n    title = \"NYC Subway Trips in May'24\"\n  )\n\n\n\n\n\n\n\nNYC Subway Trips in May'24\n\n\nTOTAL_TRIPS\n\n\n\n\n180,458,819\n\n\n\n\n\n\n\n\n\nQ5. How much did NYC subway ridership fall between April 2019 and April 2020?\nNYC subway ridership fell by 91% between April 2019 and April 2020 because of Covid pandemic.\n\nUSAGE |&gt;\n  filter(Agency == \"MTA New York City Transit\" & Mode == \"Heavy Rail\") |&gt;\n  summarise(\n    APR19_TRIPS = sum(dplyr::case_when(Month == \"2019-04-01\" ~ UPT, TRUE ~ 0), na.rm = TRUE),\n    APR20_TRIPS = sum(dplyr::case_when(Month == \"2020-04-01\" ~ UPT, TRUE ~ 0), na.rm = TRUE),\n    PCT_CHANGE = (APR20_TRIPS - APR19_TRIPS) / APR19_TRIPS\n  ) |&gt;\n  mutate(\n    PCT_CHANGE = scales::percent(PCT_CHANGE),\n    APR19_TRIPS = comma(APR19_TRIPS, digits = 0),\n    APR20_TRIPS = comma(APR20_TRIPS, digits = 0)\n  ) |&gt;\n  gt() |&gt;\n  tab_header(\n    title = \"Change in NYC Subway Ridership\"\n  )\n\n\n\n\n\n\n\nChange in NYC Subway Ridership\n\n\nAPR19_TRIPS\nAPR20_TRIPS\nPCT_CHANGE\n\n\n\n\n232,223,929\n20,254,269\n-91%"
  },
  {
    "objectID": "mp01.html#initial-analysis-of-transit-data",
    "href": "mp01.html#initial-analysis-of-transit-data",
    "title": "Mini-Project 01: Fiscal Characteristics of Major US Public Transit Systems",
    "section": "Initial analysis of transit data",
    "text": "Initial analysis of transit data\nIn this part, I conducted the initial analysis of transit data by addressing the questions provided in Task 3.\n\nQ1. What transit agency had the most total VRM in this dataset?\nNot surprisingly, MTA New York City Transit has the largest total mileage in this dataset. Its total of 10.8B+ vehicle revenue miles is almost double of the amount attributed to New Jersey Transit Corporation, the agency with the second largest result.\n\n\n\n\n\n\n\n\nTop 3 Transit Agencies by Total VRM\n\n\nAgency\nTotal_VRM\n\n\n\n\nMTA New York City Transit\n10,832,855,350\n\n\nNew Jersey Transit Corporation\n5,645,525,525\n\n\nLos Angeles County Metropolitan Transportation Authority\n4,354,016,659\n\n\n\n\n\n\n\nPlease see below for the code used to generate the aforementioned results:\n\n# installing and loading additional libraries\n\nif (!require(\"formattable\")) install.packages(\"formattable\")\nlibrary(formattable)\nif (!require(\"gt\")) install.packages(\"gt\")\nlibrary(gt)\n\nUSAGE |&gt;\n  group_by(Agency) |&gt;\n  summarize(Total_VRM = sum(VRM, na.rm = TRUE)) |&gt;\n  ungroup() |&gt;\n  mutate(Total_VRM = comma(Total_VRM, digits = 0)) |&gt;\n  slice_max(Total_VRM, n = 3) |&gt;\n  gt() |&gt;\n  tab_header(\n    title = \"Top 3 Transit Agencies by Total VRM\"\n  )\n\n\n\nQ2. What transit mode had the most total VRM in this dataset?\nWith over 49 billion vehicle revenue miles, bus has the most total VRM of all transit modes.\n\n\n\n\n\n\n\n\nTop 3 Transit Modes by Total VRM\n\n\nMode\nTotal_VRM\n\n\n\n\nBus\n49,444,494,088\n\n\nDemand Response\n17,955,073,508\n\n\nHeavy Rail\n14,620,362,107\n\n\n\n\n\n\n\nPlease see below for the code used to generate the aforementioned results:\n\nUSAGE |&gt;\n  group_by(Mode) |&gt;\n  summarize(Total_VRM = sum(VRM, na.rm = TRUE)) |&gt;\n  ungroup() |&gt;\n  mutate(Total_VRM = comma(Total_VRM, digits = 0)) |&gt;\n  slice_max(Total_VRM, n = 3) |&gt;\n  gt() |&gt;\n  tab_header(\n    title = \"Top 3 Transit Modes by Total VRM\"\n  )\n\n\n\nQ3. How many trips were taken on the NYC Subway (Heavy Rail) in May 2024?\nThere were slightly over 180 million trips recorded on NYC Subway in May 2024.\n\n\n\n\n\n\n\n\nNYC Subway Trips in May'24\n\n\nTotal_UPT\n\n\n\n\n180,458,819\n\n\n\n\n\n\n\nPlease see below for the code used to generate the aforementioned results:\n\nUSAGE |&gt;\n  dplyr::filter(\n    Mode == \"Heavy Rail\",\n    Agency == \"MTA New York City Transit\",\n    Month == \"2024-05-01\"\n  ) |&gt;\n  summarize(Total_UPT = sum(UPT, na.rm = TRUE)) |&gt;\n  ungroup() |&gt;\n  mutate(Total_UPT = comma(Total_UPT, digits = 0)) |&gt;\n  gt() |&gt;\n  tab_header(\n    title = \"NYC Subway Trips in May'24\"\n  )\n\n\n\nQ5. How much did NYC subway ridership fall between April’19 and April’20?\nNYC subway ridership fell by 91% between April 2019 and April 2020 because of the Covid’19 pandemic.\n\n\n\n\n\n\n\n\nChange in NYC Subway Ridership\n\n\nApril19_Trips\nApril20_Trips\nPct_Change\n\n\n\n\n232,223,929\n20,254,269\n-91%\n\n\n\n\n\n\n\nPlease see below for the code used to generate the aforementioned results:\n\nUSAGE |&gt;\n  filter(Agency == \"MTA New York City Transit\" & Mode == \"Heavy Rail\") |&gt;\n  summarise(\n    April19_Trips = sum(dplyr::case_when(Month == \"2019-04-01\" ~ UPT, TRUE ~ 0), na.rm = TRUE),\n    April20_Trips = sum(dplyr::case_when(Month == \"2020-04-01\" ~ UPT, TRUE ~ 0), na.rm = TRUE),\n    Pct_Change = (April20_Trips - April19_Trips) / April19_Trips\n  ) |&gt;\n  ungroup() |&gt;\n  mutate(\n    Pct_Change = scales::percent(Pct_Change),\n    April19_Trips = comma(April19_Trips, digits = 0),\n    April20_Trips = comma(April20_Trips, digits = 0)\n  ) |&gt;\n  gt() |&gt;\n  tab_header(\n    title = \"Change in NYC Subway Ridership\"\n  )"
  },
  {
    "objectID": "mp01.html#task-4---additional-analysis-of-transit-data",
    "href": "mp01.html#task-4---additional-analysis-of-transit-data",
    "title": "Mini-Project 01: Fiscal Characteristics of Major US Public Transit Systems",
    "section": "Task 4 - Additional analysis of transit data",
    "text": "Task 4 - Additional analysis of transit data\nIn this part, I took a deeper look at the NYC transit system data and discovered the following:\n1) Based on the share of UPT, subway has been, by far, the most popular mode of transportation. In any given year, its relative share of UPT is at least 2X of the second most used transit mode.\n2) Moreover, based on the changes in the share of UPT, NYC subway usage has been slowly increasing over the years. Between 2002 and 2023, it gained 9 percentage points in relative share, going from 68.1% of total to 76.6% of total, respectively.\n3) At the same time, there has been a corresponding decrease in Bus trips. Between 2002 and 2023, it lost 10 percentage points in relative share, going from 31.9% of total to 21.6% of total, respectively.\n4) Bus Rapid Transit and Commuter Bus are newer modes of transportation, with data on their usage not available until 2012.\n\n\n\n\n\n\n\n\nNYC Transit System - Relative Shares of UPT by Transportation Mode\n\n\nYEAR\nBus\nDemand Response\nHeavy Rail\nBus Rapid Transit\nCommuter Bus\n\n\n\n\n2002\n31.9%\n0.0%\n68.1%\nNA\nNA\n\n\n2003\n31.0%\n0.0%\n69.0%\nNA\nNA\n\n\n2004\n29.0%\n0.1%\n71.0%\nNA\nNA\n\n\n2005\n30.4%\n0.1%\n69.5%\nNA\nNA\n\n\n2006\n29.0%\n0.1%\n70.9%\nNA\nNA\n\n\n2007\n26.5%\n0.1%\n73.4%\nNA\nNA\n\n\n2008\n26.2%\n0.2%\n73.7%\nNA\nNA\n\n\n2009\n26.3%\n0.2%\n73.5%\nNA\nNA\n\n\n2010\n25.2%\n0.2%\n74.6%\nNA\nNA\n\n\n2011\n24.1%\n0.1%\n75.7%\nNA\nNA\n\n\n2012\n22.5%\n0.1%\n76.0%\n0.9%\n0.4%\n\n\n2013\n22.2%\n0.2%\n76.7%\n0.6%\n0.4%\n\n\n2014\n21.4%\n0.2%\n77.5%\n0.6%\n0.4%\n\n\n2015\n21.6%\n0.2%\n77.3%\n0.6%\n0.4%\n\n\n2016\n21.4%\n0.2%\n77.2%\n0.8%\n0.4%\n\n\n2017\n20.1%\n0.2%\n78.5%\n0.9%\n0.4%\n\n\n2018\n20.5%\n0.2%\n78.0%\n0.9%\n0.4%\n\n\n2019\n20.0%\n0.1%\n78.7%\n0.9%\n0.3%\n\n\n2020\n26.2%\n0.2%\n72.2%\n1.1%\n0.3%\n\n\n2021\n22.7%\n0.1%\n75.9%\n0.9%\n0.3%\n\n\n2022\n20.1%\n0.1%\n78.7%\n0.7%\n0.4%\n\n\n2023\n21.6%\n0.1%\n76.8%\n1.2%\n0.3%\n\n\n2024\n23.0%\n0.1%\n75.2%\n1.4%\n0.4%\n\n\n\n\n\n\n\nPlease see below for the code used to generate aforementioned results:\n\n# create df with annual totals\n\nnyc_annual_df &lt;- USAGE |&gt;\n  mutate(YEAR = format(as.Date(Month), \"%Y\")) |&gt;\n  dplyr::filter(Agency == \"MTA New York City Transit\") |&gt;\n  group_by(YEAR) |&gt;\n  summarize(TOTAL_TRIPS_ALL = sum(UPT, na.rm = TRUE)) |&gt;\n  ungroup()\n\n# create df with annual totals by mode\n\nnyc_mode_df &lt;- USAGE |&gt;\n  mutate(YEAR = format(as.Date(Month), \"%Y\")) |&gt;\n  dplyr::filter(Agency == \"MTA New York City Transit\") |&gt;\n  group_by(YEAR, Mode) |&gt;\n  summarize(TOTAL_TRIPS = sum(UPT, na.rm = TRUE)) |&gt;\n  ungroup()\n\n# join 2 dfs and calculate shares by mode\n\nnyc_joined_df &lt;- nyc_mode_df |&gt;\n  left_join(nyc_annual_df, by = \"YEAR\")\n\nnyc_joined_df2 &lt;- nyc_joined_df |&gt;\n  mutate(SHARE = TOTAL_TRIPS / TOTAL_TRIPS_ALL) |&gt;\n  mutate(SHARE = scales::percent(SHARE, accuracy = 0.1)) |&gt;\n  select(-TOTAL_TRIPS, -TOTAL_TRIPS_ALL)\n\n# pivot wide\n\nnyc_mode_df_pivoted &lt;- pivot_wider(nyc_joined_df2,\n  id_cols = YEAR,\n  names_from = Mode,\n  values_from = SHARE\n)\n\nnyc_mode_df_pivoted |&gt;\n  gt() |&gt;\n  tab_header(\n    title = \"NYC Transit System - Relative Shares of UPT by Transportation Mode\"\n  )"
  },
  {
    "objectID": "mp01.html#financial-data-prepation",
    "href": "mp01.html#financial-data-prepation",
    "title": "Mini-Project 01: Fiscal Characteristics of Major US Public Transit Systems",
    "section": "Financial data prepation",
    "text": "Financial data prepation\nIn this part, I created a summary usage table for 2022 and joined it with available financial data (per Task 5). The resulting dataset is provided for review after the code block.\n\n# code used to generate financial and usage summary table for 2022\n\n# create 2022 usage data\n\nUSAGE_2022_ANNUAL &lt;- USAGE |&gt;\n  select(\n    `NTD ID`,\n    Agency,\n    Metro_Area,\n    Mode,\n    UPT,\n    VRM,\n    Month\n  ) |&gt;\n  filter(year(Month) == \"2022\") |&gt;\n  group_by(\n    `NTD ID`,\n    Agency,\n    Metro_Area,\n    Mode\n  ) |&gt;\n  summarise(\n    Total_VRM = sum(VRM, na.rm = TRUE),\n    Total_UPT = sum(UPT, na.rm = TRUE)\n  ) |&gt;\n  ungroup()\n\n# recode modes values in financial data\n\nFINANCIALS2 &lt;- FINANCIALS |&gt;\n  mutate(Mode = case_when(\n    Mode == \"HR\" ~ \"Heavy Rail\",\n    Mode == \"DR\" ~ \"Demand Response\",\n    Mode == \"FB\" ~ \"Ferryboat\",\n    Mode == \"MB\" ~ \"Bus\",\n    Mode == \"SR\" ~ \"Streetcar Rail\",\n    Mode == \"TB\" ~ \"Trolleybus\",\n    Mode == \"VP\" ~ \"Vanpool\",\n    Mode == \"CB\" ~ \"Commuter Bus\",\n    Mode == \"RB\" ~ \"Bus Rapid Transit\",\n    Mode == \"LR\" ~ \"Light Rail\",\n    Mode == \"YR\" ~ \"Hybrid Rail\",\n    Mode == \"MG\" ~ \"Monorail Automated Guideway\",\n    Mode == \"CR\" ~ \"Commuter Rail\",\n    Mode == \"AR\" ~ \"Alaska Railroad\",\n    Mode == \"TR\" ~ \"Aerial Tramway\",\n    Mode == \"IP\" ~ \"Inclined Plane\",\n    Mode == \"PB\" ~ \"Publico\",\n    Mode == \"CC\" ~ \"Cable Car\",\n    TRUE ~ \"Unknown\"\n  ))\n\n# join financial and usage data\n\nUSAGE_AND_FINANCIALS &lt;- left_join(\n  USAGE_2022_ANNUAL,\n  FINANCIALS2,\n  join_by(`NTD ID`, Mode)\n) |&gt;\n  drop_na()\n\n# review the data\n\nsample_n(USAGE_AND_FINANCIALS, 1132) |&gt;\n  DT::datatable()"
  },
  {
    "objectID": "mp01.html#analysis-of-2022-financial-and-usage-data",
    "href": "mp01.html#analysis-of-2022-financial-and-usage-data",
    "title": "Mini-Project 01: Fiscal Characteristics of Major US Public Transit Systems",
    "section": "Analysis of 2022 financial and usage data",
    "text": "Analysis of 2022 financial and usage data\nIn this part, I addressed the questions outlined in Task 6. Please note that this analysis will be limited to large transit systems only (large transit systems are defined as systems with at least 400,000 total annual UPT).\n\nQ1. Which transit system (agency and mode) had the most UPT in 2022?\nNot surprisingly, NYC Subway had the largest volume of trips in 2022.\n\n\n\n\n\n\n\n\nTop 3 Transit Systems by UPT\n\n\n2022\n\n\nTransit_System\nUPT\n\n\n\n\nMTA New York City Transit_Heavy Rail\n1,793,073,801\n\n\nMTA New York City Transit_Bus\n458,602,305\n\n\nLos Angeles County Metropolitan Transportation Authority_Bus\n193,637,448\n\n\n\n\n\n\n\nPlease see below for the code used to generate the aforementioned results:\n\nUSAGE_AND_FINANCIALS |&gt;\n  unite(Transit_System, c(\"Agency\", \"Mode\")) |&gt;\n  group_by(Transit_System) |&gt;\n  filter(sum(Total_UPT, na.rm = TRUE) &gt;= 400000) |&gt;\n  summarise(UPT = sum(Total_UPT)) |&gt;\n  ungroup() |&gt;\n  mutate(UPT = comma(UPT, digits = 0)) |&gt;\n  slice_max(UPT, n = 3) |&gt;\n  gt() |&gt;\n  tab_header(\n    title = \"Top 3 Transit Systems by UPT\",\n    subtitle = \"2022\"\n  )\n\n\n\nQ2.Which transit system (agency and mode) had the highest farebox recovery, defined as the highest ratio of Total Fares to Expenses?\nIn 2022, ferryboat managed by Port Imperial Ferry Corp. had the highest farebox recovery ratio of 1.43.\n\n\n\n\n\n\n\n\nTop 3 Transit Systems by Farebox Recovery\n\n\n2022\n\n\nTransit_System\nFarebox_Recovery\n\n\n\n\nPort Imperial Ferry Corporation_Ferryboat\n142.8%\n\n\nHyannis Harbor Tours, Inc._Ferryboat\n141.3%\n\n\nTrans-Bridge Lines, Inc._Commuter Bus\n133.3%\n\n\n\n\n\n\n\nPlease see below for the code used to generate the aforementioned results:\n\nUSAGE_AND_FINANCIALS |&gt;\n  unite(Transit_System, c(\"Agency\", \"Mode\")) |&gt;\n  group_by(Transit_System) |&gt;\n  filter(sum(Total_UPT, na.rm = TRUE) &gt;= 400000) |&gt;\n  summarise(Farebox_Recovery = sum(`Total Fares`, na.rm = TRUE) / sum(Expenses, na.rm = TRUE)) |&gt;\n  ungroup() |&gt;\n  slice_max(Farebox_Recovery, n = 3) |&gt;\n  mutate(Farebox_Recovery = scales::percent(Farebox_Recovery, accuracy = 0.1)) |&gt;\n  gt() |&gt;\n  tab_header(\n    title = \"Top 3 Transit Systems by Farebox Recovery\",\n    subtitle = \"2022\"\n  )\n\n\n\nQ3.Which transit system (agency and mode) has the lowest expenses per UPT?\nIn 2022, North Carolina State University Bus had the lowest expenses per UPT of $1.18 per unlinked passenger trip.\n\n\n\n\n\n\n\n\nTop 3 Transit Systems by Expenses per UPT\n\n\n2022\n\n\nTransit_System\nExpenses_per_UPT\n\n\n\n\nNorth Carolina State University_Bus\n$1.18\n\n\nAnaheim Transportation Network_Bus\n$1.28\n\n\nUniversity of Iowa_Bus\n$1.54\n\n\n\n\n\n\n\nPlease see below for the code used to generate the aforementioned results:\n\nUSAGE_AND_FINANCIALS |&gt;\n  unite(Transit_System, c(\"Agency\", \"Mode\")) |&gt;\n  group_by(Transit_System) |&gt;\n  filter(sum(Total_UPT, na.rm = TRUE) &gt;= 400000) |&gt;\n  summarise(Expenses_Per_UPT = sum(Expenses, na.rm = TRUE) / sum(Total_UPT, na.rm = TRUE)) |&gt;\n  ungroup() |&gt;\n  slice_min(Expenses_Per_UPT, n = 3) |&gt;\n  mutate(Expenses_Per_UPT = scales::dollar(Expenses_Per_UPT)) |&gt;\n  gt() |&gt;\n  tab_header(\n    title = \"Top 3 Transit Systems by Expenses per UPT\",\n    subtitle = \"2022\"\n  )\n\n\n\nQ4.Which transit system (agency and mode) has the highest total fares per UPT?\nIn 2022, commuter bus managed by Hampton Jitney Inc. garnered the highest total fares per UPT of $41.30 per unlinked passenger trip.\n\n\n\n\n\n\n\n\nTop 3 Transit Systems by Fares per UPT\n\n\n2022\n\n\nTransit_System\nFares_per_UPT\n\n\n\n\nHampton Jitney, Inc._Commuter Bus\n$41.30\n\n\nPennsylvania Department of Transportation_Commuter Rail\n$32.26\n\n\nHyannis Harbor Tours, Inc._Ferryboat\n$29.56\n\n\n\n\n\n\n\nPlease see below for the code used to generate the aforementioned results:\n\nUSAGE_AND_FINANCIALS |&gt;\n  unite(Transit_System, c(\"Agency\", \"Mode\")) |&gt;\n  group_by(Transit_System) |&gt;\n  filter(sum(Total_UPT, na.rm = TRUE) &gt;= 400000) |&gt;\n  summarise(Fares_per_UPT = sum(`Total Fares`, na.rm = TRUE) / sum(Total_UPT, na.rm = TRUE)) |&gt;\n  ungroup() |&gt;\n  slice_max(Fares_per_UPT, n = 3) |&gt;\n  mutate(Fares_per_UPT = scales::dollar(Fares_per_UPT)) |&gt;\n  gt() |&gt;\n  tab_header(\n    title = \"Top 3 Transit Systems by Fares per UPT\",\n    subtitle = \"2022\"\n  )\n\n\n\nQ5.Which transit system (agency and mode) has the lowest expenses per VRM?\nIn 2022, Vanpool managed by Metropolitan Transportation Commission achieved the lowest expenses per VRM of $0.44 per vehicle revenue mile.\n\n\n\n\n\n\n\n\nTop 3 Transit Systems by Expenses per VRM\n\n\n2022\n\n\nTransit_System\nExpenses_per_VRM\n\n\n\n\nMetropolitan Transportation Commission_Vanpool\n$0.44\n\n\nSan Joaquin Council_Vanpool\n$0.50\n\n\nSan Diego Association of Governments_Vanpool\n$0.54\n\n\n\n\n\n\n\nPlease see below for the code used to generate the aforementioned results:\n\nUSAGE_AND_FINANCIALS |&gt;\n  unite(Transit_System, c(\"Agency\", \"Mode\")) |&gt;\n  group_by(Transit_System) |&gt;\n  filter(sum(Total_UPT, na.rm = TRUE) &gt;= 400000) |&gt;\n  summarise(Expenses_per_VRM = sum(Expenses, na.rm = TRUE) / sum(Total_VRM, na.rm = TRUE)) |&gt;\n  ungroup() |&gt;\n  slice_min(Expenses_per_VRM, n = 3) |&gt;\n  mutate(Expenses_per_VRM = scales::dollar(Expenses_per_VRM)) |&gt;\n  gt() |&gt;\n  tab_header(\n    title = \"Top 3 Transit Systems by Expenses per VRM\",\n    subtitle = \"2022\"\n  )\n\n\n\nQ6.Which transit system (agency and mode) has the highest total fares per VRM?\nIn 2022, ferryboat managed by Jacksonville Transporation Authority achieved higher fares per VRM than any other large transit system with UPT of at least 400,000.\n\n\n\n\n\n\n\n\nTop 3 Transit Systems by Fares per VRM\n\n\n2022\n\n\nTransit_System\nFares_per_VRM\n\n\n\n\nJacksonville Transportation Authority_Ferryboat\n$157.70\n\n\nChattanooga Area Regional Transportation Authority_Inclined Plane\n$149.30\n\n\nHyannis Harbor Tours, Inc._Ferryboat\n$137.64\n\n\n\n\n\n\n\nPlease see below for the code used to generate the aforementioned results:\n\nUSAGE_AND_FINANCIALS |&gt;\n  unite(Transit_System, c(\"Agency\", \"Mode\")) |&gt;\n  group_by(Transit_System) |&gt;\n  filter(sum(Total_UPT, na.rm = TRUE) &gt;= 400000) |&gt;\n  summarise(Fares_per_VRM = sum(`Total Fares`, na.rm = TRUE) / sum(Total_VRM, na.rm = TRUE)) |&gt;\n  ungroup() |&gt;\n  slice_max(Fares_per_VRM, n = 3) |&gt;\n  mutate(Fares_per_VRM = scales::dollar(Fares_per_VRM)) |&gt;\n  gt() |&gt;\n  tab_header(\n    title = \"Top 3 Transit Systems by Fares per VRM\",\n    subtitle = \"2022\"\n  )\n\n\n\nConclusion\nThe farebox recovery ratio is one of the key metrics used to evaluate financial performance of transit systems (Source). With the farebox recovery ratio of 142.8%, the ferryboat managed by Port Imperial Ferry Corporation appeared to be the most efficient large transit system in 2022."
  },
  {
    "objectID": "mp01.html#additional-analysis-of-transit-data",
    "href": "mp01.html#additional-analysis-of-transit-data",
    "title": "Mini-Project 01: Fiscal Characteristics of Major US Public Transit Systems",
    "section": "Additional Analysis of Transit Data",
    "text": "Additional Analysis of Transit Data\nIn this part, I conducted additional analysis of transit usage data as instructed in Task 4. Focusing on MTA New York City Transit, I analyzed the relative popularity of different transporation options over the years and discovered the following:\n1) Based on the share of UPT, subway has been, by far, the most popular mode of transportation. In any given year, its relative share of UPT is at least 2X of that of the second most used transit mode, Bus.\n2) Moreover, based on the changes in the share of UPT, NYC subway usage has been slowly increasing over the years. Between 2002 and 2023, it gained 9 percentage points in relative share, going from 68.1% of total to 76.8% of total, respectively.\n3) At the same time, there has been a corresponding decrease in Bus trips. Between 2002 and 2023, it lost 10 percentage points in relative share, going from 31.9% of total to 21.6% of total, respectively.\n4) Bus Rapid Transit and Commuter Bus are newer modes of transportation, with data on their usage not available until 2012.\n\n\n\n\n\n\n\n\nNYC Transit System - Relative Shares of UPT by Transportation Mode\n\n\nYEAR\nBus\nDemand Response\nHeavy Rail\nBus Rapid Transit\nCommuter Bus\n\n\n\n\n2002\n31.9%\n0.0%\n68.1%\nNA\nNA\n\n\n2003\n31.0%\n0.0%\n69.0%\nNA\nNA\n\n\n2004\n29.0%\n0.1%\n71.0%\nNA\nNA\n\n\n2005\n30.4%\n0.1%\n69.5%\nNA\nNA\n\n\n2006\n29.0%\n0.1%\n70.9%\nNA\nNA\n\n\n2007\n26.5%\n0.1%\n73.4%\nNA\nNA\n\n\n2008\n26.2%\n0.2%\n73.7%\nNA\nNA\n\n\n2009\n26.3%\n0.2%\n73.5%\nNA\nNA\n\n\n2010\n25.2%\n0.2%\n74.6%\nNA\nNA\n\n\n2011\n24.1%\n0.1%\n75.7%\nNA\nNA\n\n\n2012\n22.5%\n0.1%\n76.0%\n0.9%\n0.4%\n\n\n2013\n22.2%\n0.2%\n76.7%\n0.6%\n0.4%\n\n\n2014\n21.4%\n0.2%\n77.5%\n0.6%\n0.4%\n\n\n2015\n21.6%\n0.2%\n77.3%\n0.6%\n0.4%\n\n\n2016\n21.4%\n0.2%\n77.2%\n0.8%\n0.4%\n\n\n2017\n20.1%\n0.2%\n78.5%\n0.9%\n0.4%\n\n\n2018\n20.5%\n0.2%\n78.0%\n0.9%\n0.4%\n\n\n2019\n20.0%\n0.1%\n78.7%\n0.9%\n0.3%\n\n\n2020\n26.2%\n0.2%\n72.2%\n1.1%\n0.3%\n\n\n2021\n22.7%\n0.1%\n75.9%\n0.9%\n0.3%\n\n\n2022\n20.1%\n0.1%\n78.7%\n0.7%\n0.4%\n\n\n2023\n21.6%\n0.1%\n76.8%\n1.2%\n0.3%\n\n\n2024\n23.0%\n0.1%\n75.2%\n1.4%\n0.4%\n\n\n\n\n\n\n\n(Relative share of UPT is calculated as UPT of a given mode over total annual UPT)\nPlease see below for the code used to generate aforementioned results:\n\n# create df with annual totals\n\nnyc_annual_df &lt;- USAGE |&gt;\n  mutate(YEAR = format(as.Date(Month), \"%Y\")) |&gt;\n  dplyr::filter(Agency == \"MTA New York City Transit\") |&gt;\n  group_by(YEAR) |&gt;\n  summarize(TOTAL_TRIPS_ALL = sum(UPT, na.rm = TRUE)) |&gt;\n  ungroup()\n\n# create df with annual totals by mode\n\nnyc_mode_df &lt;- USAGE |&gt;\n  mutate(YEAR = format(as.Date(Month), \"%Y\")) |&gt;\n  dplyr::filter(Agency == \"MTA New York City Transit\") |&gt;\n  group_by(YEAR, Mode) |&gt;\n  summarize(TOTAL_TRIPS = sum(UPT, na.rm = TRUE)) |&gt;\n  ungroup()\n\n# join 2 dfs and calculate shares by mode\n\nnyc_joined_df &lt;- nyc_mode_df |&gt;\n  left_join(nyc_annual_df, by = \"YEAR\")\n\nnyc_joined_df2 &lt;- nyc_joined_df |&gt;\n  mutate(SHARE = TOTAL_TRIPS / TOTAL_TRIPS_ALL) |&gt;\n  mutate(SHARE = scales::percent(SHARE, accuracy = 0.1)) |&gt;\n  select(-TOTAL_TRIPS, -TOTAL_TRIPS_ALL)\n\n# pivot wide\n\nnyc_mode_df_pivoted &lt;- pivot_wider(nyc_joined_df2,\n  id_cols = YEAR,\n  names_from = Mode,\n  values_from = SHARE\n)\n\nnyc_mode_df_pivoted |&gt;\n  gt() |&gt;\n  tab_header(\n    title = \"NYC Transit System - Relative Shares of UPT by Transportation Mode\"\n  )"
  },
  {
    "objectID": "mp01.html#initial-data-preparation",
    "href": "mp01.html#initial-data-preparation",
    "title": "Mini-Project 01: Fiscal Characteristics of Major US Public Transit Systems",
    "section": "Initial data preparation",
    "text": "Initial data preparation\nIn this part, I created the base table for data analysis using the code provided in the assignment. I also modified column naming convention (as instructed in Task 1) and recoded the values in the ‘Mode’ column to make them easier to understand and use for analysis (as instructed in Task 2). The base table is provided for review after the code block (please note NTD ID and 3 Modes columns are excluded from the preview).\n\n# Installing and loading libraries\n\nif (!require(\"tidyverse\")) install.packages(\"tidyverse\")\nlibrary(tidyverse)\nif (!require(\"DT\")) install.packages(\"DT\")\nlibrary(DT)\nif (!require(\"dplyr\")) install.packages(\"dplyr\")\nlibrary(dplyr)\n\n# Let's start with Fare Revenue\n\nFARES &lt;- readxl::read_xlsx(\"2022_fare_revenue.xlsx\") |&gt;\n  select(\n    -`State/Parent NTD ID`,\n    -`Reporter Type`,\n    -`Reporting Module`,\n    -`TOS`,\n    -`Passenger Paid Fares`,\n    -`Organization Paid Fares`\n  ) |&gt;\n  filter(`Expense Type` == \"Funds Earned During Period\") |&gt;\n  select(-`Expense Type`) |&gt;\n  group_by(\n    `NTD ID`, # Sum over different `TOS` for the same `Mode`\n    `Agency Name`, # These are direct operated and sub-contracted\n    `Mode`\n  ) |&gt; # of the same transit modality\n  # Not a big effect in most munis (significant DO\n  # tends to get rid of sub-contractors), but we'll sum\n  # to unify different passenger experiences\n  summarize(`Total Fares` = sum(`Total Fares`)) |&gt;\n  ungroup()\n\n# Next, expenses\n\nEXPENSES &lt;- readr::read_csv(\"2022_expenses.csv\") |&gt;\n  select(\n    `NTD ID`,\n    `Agency`,\n    `Total`,\n    `Mode`\n  ) |&gt;\n  mutate(`NTD ID` = as.integer(`NTD ID`)) |&gt;\n  rename(Expenses = Total) |&gt;\n  group_by(`NTD ID`, `Mode`) |&gt;\n  summarize(Expenses = sum(Expenses)) |&gt;\n  ungroup()\n\nFINANCIALS &lt;- inner_join(FARES, EXPENSES, join_by(`NTD ID`, `Mode`))\n\n# Monthly Transit Numbers\n\nTRIPS &lt;- readxl::read_xlsx(\"ridership.xlsx\", sheet = \"UPT\") |&gt;\n  filter(`Mode/Type of Service Status` == \"Active\") |&gt;\n  select(\n    -`Legacy NTD ID`,\n    -`Reporter Type`,\n    -`Mode/Type of Service Status`,\n    -`UACE CD`,\n    -`TOS`\n  ) |&gt;\n  pivot_longer(-c(`NTD ID`:`3 Mode`),\n    names_to = \"Month\",\n    values_to = \"UPT\"\n  ) |&gt;\n  drop_na() |&gt;\n  mutate(Month = my(Month)) # Parse _m_onth _y_ear date specs\n\nMILES &lt;- readxl::read_xlsx(\"ridership.xlsx\", sheet = \"VRM\") |&gt;\n  filter(`Mode/Type of Service Status` == \"Active\") |&gt;\n  select(\n    -`Legacy NTD ID`,\n    -`Reporter Type`,\n    -`Mode/Type of Service Status`,\n    -`UACE CD`,\n    -`TOS`\n  ) |&gt;\n  pivot_longer(-c(`NTD ID`:`3 Mode`),\n    names_to = \"Month\",\n    values_to = \"VRM\"\n  ) |&gt;\n  drop_na() |&gt;\n  group_by(\n    `NTD ID`, `Agency`, `UZA Name`,\n    `Mode`, `3 Mode`, Month\n  ) |&gt;\n  summarize(VRM = sum(VRM)) |&gt;\n  ungroup() |&gt;\n  mutate(Month = my(Month)) # Parse _m_onth _y_ear date specs\n\nUSAGE &lt;- inner_join(TRIPS, MILES) |&gt;\n  mutate(`NTD ID` = as.integer(`NTD ID`))\n\n## Task 1 - Creating syntatic names\n\nnames(USAGE)[3] &lt;- \"Metro_Area\"\n\n## Task 2 - Recoding the Mode column\n\nUSAGE &lt;- USAGE |&gt;\n  mutate(Mode = case_when(\n    Mode == \"HR\" ~ \"Heavy Rail\",\n    Mode == \"DR\" ~ \"Demand Response\",\n    Mode == \"FB\" ~ \"Ferryboat\",\n    Mode == \"MB\" ~ \"Bus\",\n    Mode == \"SR\" ~ \"Streetcar Rail\",\n    Mode == \"TB\" ~ \"Trolleybus\",\n    Mode == \"VP\" ~ \"Vanpool\",\n    Mode == \"CB\" ~ \"Commuter Bus\",\n    Mode == \"RB\" ~ \"Bus Rapid Transit\",\n    Mode == \"LR\" ~ \"Light Rail\",\n    Mode == \"YR\" ~ \"Hybrid Rail\",\n    Mode == \"MG\" ~ \"Monorail Automated Guideway\",\n    Mode == \"CR\" ~ \"Commuter Rail\",\n    Mode == \"AR\" ~ \"Alaska Railroad\",\n    Mode == \"TR\" ~ \"Aerial Tramway\",\n    Mode == \"IP\" ~ \"Inclined Plane\",\n    Mode == \"PB\" ~ \"Publico\",\n    Mode == \"CC\" ~ \"Cable Car\",\n    TRUE ~ \"Unknown\"\n  ))\n\n# base table sampled\n\nsample_n(USAGE, 1000) |&gt;\n  select(-`NTD ID`, -`3 Mode`) |&gt;\n  mutate(Month = as.character(Month)) |&gt;\n  DT::datatable()"
  },
  {
    "objectID": "mp02.html",
    "href": "mp02.html",
    "title": "Mini-Project 02: Business of Show Business",
    "section": "",
    "text": "In this paper, we will analyze the IMDB data to answer some questions, design a measurement framework for evaluating performance and identify an opportunity for investment. #### Data Prep\nIn this section, we obtain and prepare data for analysis. Because of the memory and performance issues, we will use small files and further down-select data to enable a more fluid analysis. We will drop titles with fewer than 100 ratings and individuals who worked on only 1 title.\nInstalling and Loading Libraries\n\n\nShow the code\n# Installing and loading libraries\n\nif (!require(\"tidyverse\")) install.packages(\"tidyverse\")\nlibrary(tidyverse)\nif (!require(\"DT\")) install.packages(\"DT\")\nlibrary(DT)\nif (!require(\"dplyr\")) install.packages(\"dplyr\")\nlibrary(dplyr)\nif (!require(\"psych\")) install.packages(\"psych\")\nlibrary(psych)\nif (!require(\"gt\")) install.packages(\"gt\")\nlibrary(gt)\nif (!require(\"formattable\")) install.packages(\"formattable\")\nlibrary(formattable)\nif (!require(\"sqldf\")) install.packages(\"sqldf\")\nlibrary(sqldf)\nif (!require(\"plotly\")) install.packages(\"plotly\")\nlibrary(plotly)\nif (!require(\"ggplot2\")) install.packages(\"ggplot2\")\nlibrary(ggplot2)\nif (!require(\"RColorBrewer\")) install.packages(\"RColorBrewer\")\nlibrary(RColorBrewer)\n\n\nReading data in\n\n\nShow the code\n## read files in and create dataframes\n\nname_basics &lt;- read.csv(\"name_basics_small.csv\")\ntitle_basics &lt;- read.csv(\"title_basics_small.csv\")\ntitle_episodes &lt;- read.csv(\"title_episodes_small.csv\")\ntitle_ratings &lt;- read.csv(\"title_ratings_small.csv\")\ntitle_crew &lt;- read.csv(\"title_crew_small.csv\")\ntitle_principals &lt;- read.csv(\"title_principals_small.csv\")\n\n# drop records with fewer than 2 titles from name_basics df\n\nname_basics &lt;- name_basics |&gt;\n  filter(str_count(knownForTitles, \",\") &gt; 1)\n\n# drop records with fewer than 100 ratings from title_ratings df\n\ntitle_ratings &lt;- title_ratings |&gt;\n  filter(numVotes &gt;= 100)\n\n\nFurthermore, to ensure consistency across all data sets, we will apply the same filtering, i.e., excluding titles with fewer than 100 ratings, to the rest of the title tables:\n\n\nShow the code\n# filtering title basics df\n\ntitle_basics &lt;- title_basics |&gt;\n  semi_join(\n    title_ratings,\n    join_by(tconst == tconst)\n  )\n\n# filtering title crew df\n\ntitle_crew &lt;- title_crew |&gt;\n  semi_join(\n    title_ratings,\n    join_by(tconst == tconst)\n  )\n\n# filtering title episodes df on title id\n\ntitle_episodes_1 &lt;- title_episodes |&gt;\n  semi_join(\n    title_ratings,\n    join_by(tconst == tconst)\n  )\n\n# filtering title episodes df on parent title id\n\ntitle_episodes_2 &lt;- title_episodes |&gt;\n  semi_join(\n    title_ratings,\n    join_by(parentTconst == tconst)\n  )\n\n# combining filtered title episodes dfs\n\ntitle_episodes &lt;- bind_rows(\n  title_episodes_1,\n  title_episodes_2\n) |&gt;\n  distinct()\n\n## filtering title principals df\n\ntitle_principals &lt;- title_principals |&gt;\n  semi_join(\n    title_ratings,\n    join_by(tconst == tconst)\n  )\n\n# remove dfs we no longer need\n\nrm(title_episodes_1)\nrm(title_episodes_2)\n\n\n\nTask 1\n\nCorrect the column types of the title tables using a combination of mutate and the coercion functions as.numeric and as.logical.\n\nTitle Basics\n\nglimpse(title_basics)\n\nRows: 372,198\nColumns: 9\n$ tconst         &lt;chr&gt; \"tt0000001\", \"tt0000002\", \"tt0000003\", \"tt0000004\", \"tt…\n$ titleType      &lt;chr&gt; \"short\", \"short\", \"short\", \"short\", \"short\", \"short\", \"…\n$ primaryTitle   &lt;chr&gt; \"Carmencita\", \"Le clown et ses chiens\", \"Pauvre Pierrot…\n$ originalTitle  &lt;chr&gt; \"Carmencita\", \"Le clown et ses chiens\", \"Pauvre Pierrot…\n$ isAdult        &lt;int&gt; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0…\n$ startYear      &lt;chr&gt; \"1894\", \"1892\", \"1892\", \"1892\", \"1893\", \"1894\", \"1894\",…\n$ endYear        &lt;chr&gt; \"\\\\N\", \"\\\\N\", \"\\\\N\", \"\\\\N\", \"\\\\N\", \"\\\\N\", \"\\\\N\", \"\\\\N\",…\n$ runtimeMinutes &lt;chr&gt; \"1\", \"5\", \"5\", \"12\", \"1\", \"1\", \"1\", \"1\", \"45\", \"1\", \"1\"…\n$ genres         &lt;chr&gt; \"Documentary,Short\", \"Animation,Short\", \"Animation,Come…\n\n\nColumns startYear,endYear and runtimeMinutes are formatted as character/string in the original data set and need to be changed to be numeric.\n\n## recode column types and rename columns\n\ntitle_basics &lt;- title_basics |&gt;\n  mutate(\n    startYear = as.numeric(startYear),\n    endYear = as.numeric(endYear),\n    runtimeMinutes = as.numeric(runtimeMinutes)\n  ) |&gt;\n  rename(\n    start_year = startYear,\n    end_year = endYear,\n    runtime_minutes = runtimeMinutes\n  )\n\nglimpse(title_basics)\n\nRows: 372,198\nColumns: 9\n$ tconst          &lt;chr&gt; \"tt0000001\", \"tt0000002\", \"tt0000003\", \"tt0000004\", \"t…\n$ titleType       &lt;chr&gt; \"short\", \"short\", \"short\", \"short\", \"short\", \"short\", …\n$ primaryTitle    &lt;chr&gt; \"Carmencita\", \"Le clown et ses chiens\", \"Pauvre Pierro…\n$ originalTitle   &lt;chr&gt; \"Carmencita\", \"Le clown et ses chiens\", \"Pauvre Pierro…\n$ isAdult         &lt;int&gt; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, …\n$ start_year      &lt;dbl&gt; 1894, 1892, 1892, 1892, 1893, 1894, 1894, 1894, 1894, …\n$ end_year        &lt;dbl&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA…\n$ runtime_minutes &lt;dbl&gt; 1, 5, 5, 12, 1, 1, 1, 1, 45, 1, 1, 1, 1, 1, 2, 1, 1, 1…\n$ genres          &lt;chr&gt; \"Documentary,Short\", \"Animation,Short\", \"Animation,Com…\n\n\nTitle Crew\n\nglimpse(title_crew)\n\nRows: 371,902\nColumns: 3\n$ tconst    &lt;chr&gt; \"tt0000001\", \"tt0000002\", \"tt0000003\", \"tt0000004\", \"tt00000…\n$ directors &lt;chr&gt; \"nm0005690\", \"nm0721526\", \"nm0721526\", \"nm0721526\", \"nm00056…\n$ writers   &lt;chr&gt; \"\\\\N\", \"\\\\N\", \"\\\\N\", \"\\\\N\", \"\\\\N\", \"\\\\N\", \"\\\\N\", \"\\\\N\", \"nm0…\n\n\nThere is no need to correct any data types here.\nTitle Episodes\n\nglimpse(title_episodes)\n\nRows: 3,007,178\nColumns: 4\n$ tconst        &lt;chr&gt; \"tt0045960\", \"tt0046855\", \"tt0048378\", \"tt0048562\", \"tt0…\n$ parentTconst  &lt;chr&gt; \"tt0044284\", \"tt0046643\", \"tt0047702\", \"tt0047768\", \"tt0…\n$ seasonNumber  &lt;chr&gt; \"2\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"3\", \"3\", \"…\n$ episodeNumber &lt;chr&gt; \"3\", \"4\", \"6\", \"10\", \"4\", \"20\", \"5\", \"2\", \"20\", \"6\", \"2\"…\n\n\nseasonNumber and episodeNumber columns need to be converted to numeric format.\n\n## recode column types and rename columns\n\ntitle_episodes &lt;- title_episodes |&gt;\n  mutate(\n    seasonNumber = as.numeric(seasonNumber),\n    episodeNumber = as.numeric(episodeNumber)\n  ) |&gt;\n  rename(\n    season_number = seasonNumber,\n    episode_number = episodeNumber\n  )\n\nglimpse(title_episodes)\n\nRows: 3,007,178\nColumns: 4\n$ tconst         &lt;chr&gt; \"tt0045960\", \"tt0046855\", \"tt0048378\", \"tt0048562\", \"tt…\n$ parentTconst   &lt;chr&gt; \"tt0044284\", \"tt0046643\", \"tt0047702\", \"tt0047768\", \"tt…\n$ season_number  &lt;dbl&gt; 2, 1, 1, 1, 1, 1, 1, 1, 1, 3, 3, 1, 8, 1, 10, 6, 2, 8, …\n$ episode_number &lt;dbl&gt; 3, 4, 6, 10, 4, 20, 5, 2, 20, 6, 2, 3, 2, 10, 17, 5, 1,…\n\n\nTitle Principals\n\nglimpse(title_principals)\n\nRows: 6,586,689\nColumns: 6\n$ tconst     &lt;chr&gt; \"tt0000001\", \"tt0000001\", \"tt0000001\", \"tt0000001\", \"tt0000…\n$ ordering   &lt;int&gt; 1, 2, 3, 4, 1, 2, 1, 2, 3, 4, 5, 1, 2, 1, 2, 3, 1, 2, 3, 4,…\n$ nconst     &lt;chr&gt; \"nm1588970\", \"nm0005690\", \"nm0005690\", \"nm0374658\", \"nm0721…\n$ category   &lt;chr&gt; \"self\", \"director\", \"producer\", \"cinematographer\", \"directo…\n$ job        &lt;chr&gt; \"\\\\N\", \"\\\\N\", \"producer\", \"director of photography\", \"\\\\N\",…\n$ characters &lt;chr&gt; \"[\\\"Self\\\"]\", \"\\\\N\", \"\\\\N\", \"\\\\N\", \"\\\\N\", \"\\\\N\", \"\\\\N\", \"\\\\…\n\n\nThere is no need to correct data types here.\nTitle Ratings\n\nglimpse(title_ratings)\n\nRows: 372,198\nColumns: 3\n$ tconst        &lt;chr&gt; \"tt0000001\", \"tt0000002\", \"tt0000003\", \"tt0000004\", \"tt0…\n$ averageRating &lt;dbl&gt; 5.7, 5.6, 6.5, 5.4, 6.2, 5.0, 5.4, 5.4, 5.4, 6.8, 5.2, 7…\n$ numVotes      &lt;int&gt; 2090, 283, 2094, 184, 2828, 196, 889, 2233, 214, 7699, 3…\n\n\nThere is no need to correct data types here.\nName Basics\n\nglimpse(name_basics)\n\nRows: 2,460,608\nColumns: 6\n$ nconst            &lt;chr&gt; \"nm0000001\", \"nm0000002\", \"nm0000003\", \"nm0000004\", …\n$ primaryName       &lt;chr&gt; \"Fred Astaire\", \"Lauren Bacall\", \"Brigitte Bardot\", …\n$ birthYear         &lt;chr&gt; \"1899\", \"1924\", \"1934\", \"1949\", \"1918\", \"1915\", \"189…\n$ deathYear         &lt;chr&gt; \"1987\", \"2014\", \"\\\\N\", \"1982\", \"2007\", \"1982\", \"1957…\n$ primaryProfession &lt;chr&gt; \"actor,miscellaneous,producer\", \"actress,soundtrack,…\n$ knownForTitles    &lt;chr&gt; \"tt0072308,tt0050419,tt0053137,tt0027125\", \"tt003738…\n\n\nbirthYear and deathYear columns need to be formatted as numeric.\n\n## recode column types and rename columns\n\nname_basics &lt;- name_basics |&gt;\n  mutate(\n    birthYear = as.numeric(birthYear),\n    deathYear = as.numeric(deathYear)\n  ) |&gt;\n  rename(\n    birth_year = birthYear,\n    death_year = deathYear\n  )\n\nglimpse(name_basics)\n\nRows: 2,460,608\nColumns: 6\n$ nconst            &lt;chr&gt; \"nm0000001\", \"nm0000002\", \"nm0000003\", \"nm0000004\", …\n$ primaryName       &lt;chr&gt; \"Fred Astaire\", \"Lauren Bacall\", \"Brigitte Bardot\", …\n$ birth_year        &lt;dbl&gt; 1899, 1924, 1934, 1949, 1918, 1915, 1899, 1924, 1925…\n$ death_year        &lt;dbl&gt; 1987, 2014, NA, 1982, 2007, 1982, 1957, 2004, 1984, …\n$ primaryProfession &lt;chr&gt; \"actor,miscellaneous,producer\", \"actress,soundtrack,…\n$ knownForTitles    &lt;chr&gt; \"tt0072308,tt0050419,tt0053137,tt0027125\", \"tt003738…\n\n\n\n\nTask 2 - Instructor-Provided Questions\n\nQ1. How many movies are in our data set? How many TV series? How many TV episodes?\nTo answer this question, we will use the title basics data set, which contains release and production information.\n\n# get a count of records by content types\n\ndf1 &lt;- title_basics |&gt;\n  group_by(titleType) |&gt;\n  summarize(number_of_records = n()) |&gt;\n  ungroup() |&gt;\n  mutate(number_of_records = comma(number_of_records, digits = 0)) |&gt;\n  rename(title_type = titleType) |&gt;\n  arrange(desc(number_of_records))\n\n# plot the resulting df\n\nfig_content_count_type &lt;- plot_ly(\n  data = df1,\n  y = ~ reorder(title_type, number_of_records),\n  x = ~number_of_records,\n  type = \"bar\",\n  orientation = \"h\",\n  marker = list(color = \"cerulean\"),\n  width = 500,\n  height = 300\n)\n\nfig_content_count_type &lt;- fig_content_count_type |&gt;\n  layout(\n    title = \"Number of Titles by Content Type\",\n    xaxis = list(title = \"Number of Records\"),\n    yaxis = list(title = \"\")\n  )\n\n\nfig_content_count_type\n\n\n\n\n\nContent type is captured in the titleType column. We have 131,662 movies, 29,789 TV Series and 155,722 TV episodes.\n\n\nQ2. Who is the oldest living person in our data set?\nTo answer this question, we will use the name basics table, which has birth and death records. However, a quick examination of data highlights certain irregularities in death records. It appears that we are missing actual death records for a number of individuals who, despite being born prior to the 20th century, are appear to still be alive.\n\n# list living persons by year of birth\n\n# Subset of data - 10 oldest presumably living persons \nname_basics |&gt;\n  filter(is.na(death_year) & !is.na(birth_year)) |&gt;\n  arrange(birth_year) |&gt;\n  head(10) |&gt;\n  gt()\n\n\n\n\n\n\n\nnconst\nprimaryName\nbirth_year\ndeath_year\nprimaryProfession\nknownForTitles\n\n\n\n\nnm5671597\nRobert De Visée\n1655\nNA\ncomposer,soundtrack\ntt2219674,tt1743724,tt0441074,tt14426058\n\n\nnm7807390\nWilliam Sandys\n1767\nNA\ncomposer,soundtrack\ntt4396584,tt3747572,tt4555594,tt0071007\n\n\nnm1441282\nRichard Dybeck\n1811\nNA\nsoundtrack\ntt0021783,tt0022126,tt0036372,tt0037562\n\n\nnm6711738\nAlbert Monnier\n1815\nNA\nwriter\ntt0329972,tt3966780,tt6793558,tt15175930\n\n\nnm1227803\nC. Hostrup\n1818\nNA\nwriter,composer,actor\ntt0031361,tt0134089,tt0844680,tt14463014\n\n\nnm1329526\nEdouard Martin\n1825\nNA\nwriter\ntt0200268,tt0329972,tt3966780,tt0036496\n\n\nnm1197286\nIon Ivanovici\n1845\nNA\ncomposer,soundtrack\ntt0043412,tt0040391,tt1324061,tt0083697\n\n\nnm0179107\nAttilio Corbell\n1850\nNA\nactor\ntt0009508,tt0009121,tt0182770,tt0007472\n\n\nnm0843185\nAndré Sylvane\n1850\nNA\nwriter\ntt0019480,tt0155273,tt0159028,tt0167460\n\n\nnm0242243\nCharles Dungan\n1853\nNA\nactor\ntt0267008,tt0008259,tt0008876,tt0003634\n\n\n\n\n\n\n\n\n# create a df with records of living persons\n\ndf3 &lt;- name_basics |&gt;\n  filter(is.na(death_year) & !is.na(birth_year)) |&gt;\n  group_by(birth_year) |&gt;\n  summarise(number_of_records = n()) |&gt;\n  ungroup() |&gt;\n  arrange(birth_year)\n\n# plot the resulting df\n\nfig_cnt_living_persons &lt;- plot_ly(\n  data = df3,\n  x = ~birth_year,\n  y = ~number_of_records,\n  type = \"bar\",\n  marker = list(color = \"cerulean\"),\n  width = 500,\n  height = 300\n)\n\nfig_cnt_living_persons &lt;- fig_cnt_living_persons |&gt;\n  layout(\n    title = \"Living Persons by Year of Birth\",\n    xaxis = list(title = \"Year of Birth\"),\n    yaxis = list(title = \"Count of Living Persons\")\n  )\n\nfig_cnt_living_persons\n\n\n\n\n\nSince we can’t manually verify verify hundreds of questionable records, we will have to use a rule-based approach to answer this question. The oldest verified person to have ever lived was 122 years and 164 days at the time of death so using this age as a threshold, we can filter out all individuals born after 1902, which leaves us with 65 individuals born in 1903.\n\n# list count of living persons by year of birth\n\nname_basics |&gt;\n  filter(is.na(death_year) & !is.na(birth_year) & birth_year &gt; 1902) |&gt;\n  group_by(birth_year) |&gt;\n  summarize(number_of_records = n()) |&gt;\n  ungroup() |&gt;\n  arrange(birth_year) |&gt;\n  head(5) |&gt;\n  gt()\n\n\n\n\n\n\n\nbirth_year\nnumber_of_records\n\n\n\n\n1903\n65\n\n\n1904\n77\n\n\n1905\n68\n\n\n1906\n83\n\n\n1907\n78\n\n\n\n\n\n\n\n\n# list living persons born in 1903\ndf4 &lt;- name_basics |&gt;\n  filter(birth_year == 1903 & is.na(death_year)) |&gt;\n  select(primaryName, birth_year, death_year) |&gt;\n  arrange(primaryName)\n\nsample_n(df4, 65) |&gt;\n  DT::datatable()\n\n\n\n\n\n\n\nQ3. There is one TV Episode in this data set with a perfect 10/10 rating and 200,000 IMDb ratings. What is it? What series does it belong to?\nTo answer this question, we need to use 3 data sets, title ratings,title basics and title episodes.\n\n# create df with list of all TV episodes\n\nlist_tv_epis &lt;- title_basics |&gt;\n  filter(titleType == \"tvEpisode\") |&gt;\n  select(tconst, titleType, primaryTitle)\n\n# create df with list of all TV series\n\nlist_tv_series &lt;- title_basics |&gt;\n  filter(titleType == \"tvSeries\") |&gt;\n  select(tconst, titleType, primaryTitle)\n\n# create df with records of tv episodes\n\ntv_ep_df1 &lt;- inner_join(list_tv_epis, title_episodes, by = \"tconst\")\n\n# join ratings data\n\ntv_ep_df2 &lt;- inner_join(tv_ep_df1, title_ratings, by = \"tconst\")\n\n# find a TV episode meeting criteria\n\ntv_ep_df3 &lt;- tv_ep_df2 |&gt;\n  filter((numVotes &gt;= 200000) & (averageRating == 10))\n\n# map tv series name\n\ntv_ep_ratings_df &lt;- inner_join(tv_ep_df3, list_tv_series, by = c(\"parentTconst\" = \"tconst\"))\n\n# rename columns in the resulting df\ntv_ep_ratings_df |&gt;\n  rename(\n    episode_id = tconst,\n    average_rating = averageRating,\n    number_of_ratings = numVotes,\n    title_type = titleType.x,\n    episode_title = primaryTitle.x,\n    series_id = parentTconst,\n    series_name = primaryTitle.y,\n    parent_title_type = titleType.y\n  ) |&gt;\n  gt()\n\n\n\n\n\n\n\nepisode_id\ntitle_type\nepisode_title\nseries_id\nseason_number\nepisode_number\naverage_rating\nnumber_of_ratings\nparent_title_type\nseries_name\n\n\n\n\ntt2301451\ntvEpisode\nOzymandias\ntt0903747\n5\n14\n10\n227589\ntvSeries\nBreaking Bad\n\n\n\n\n\n\n\nThe TV episode with the perfect 10/10 rating and over 200K reviews is Ozymandias ep.15 season 5 of the cult TV hit Breaking Bad.\n\n\nQ4. What four projects is the actor Mark Hamill most known for?\nTo answer this question, we will use name basics and title basics data sets.\n\n# get title records for mark hamill\n\nmh_df &lt;- name_basics |&gt;\n  filter(primaryName == \"Mark Hamill\") |&gt;\n  select(primaryName, knownForTitles) |&gt;\n  separate_longer_delim(knownForTitles, \",\")\n\n# map titles names and types on the list of selected content IDs\n\nmh_df2 &lt;- inner_join(mh_df, title_basics, by = c(\"knownForTitles\" = \"tconst\"))\nmh_df2 |&gt;\n  select(knownForTitles, titleType, primaryTitle, start_year) |&gt;\n  rename(\n    title_id = knownForTitles,\n    content_type = titleType,\n    content_title = primaryTitle,\n    year = start_year\n  ) |&gt;\n  gt() |&gt;\n  tab_header(\n    title = \"Titles Mark Hamill is Known For\"\n  )\n\n\n\n\n\n\n\nTitles Mark Hamill is Known For\n\n\ntitle_id\ncontent_type\ncontent_title\nyear\n\n\n\n\ntt0076759\nmovie\nStar Wars: Episode IV - A New Hope\n1977\n\n\ntt2527336\nmovie\nStar Wars: Episode VIII - The Last Jedi\n2017\n\n\ntt0080684\nmovie\nStar Wars: Episode V - The Empire Strikes Back\n1980\n\n\ntt0086190\nmovie\nStar Wars: Episode VI - Return of the Jedi\n1983\n\n\n\n\n\n\n\nMark Hamill is known for his roles in the Star Wars movies, where he first starred in 1977 and most recently in 2017.\n\n\nQ5. What TV series, with more than 12 episodes, has the highest average rating?\nTo answer this question, we need 3 data sets - title_episodes, title ratings and title basics.\n\n# we already have a df with all TV series - we created it in a previous question - list_tv_series\n\n# create a df with records of tv series wirh all episodes\n\nep_filtered_series &lt;- inner_join(title_episodes, list_tv_series, by = c(\"parentTconst\" = \"tconst\"))\n\n# df with tv series with 12+ episodes\n\nseries_num_epis &lt;- ep_filtered_series |&gt;\n  group_by(parentTconst, primaryTitle, titleType) |&gt;\n  summarise(num_episodes = n()) |&gt;\n  ungroup() |&gt;\n  arrange(desc(num_episodes)) |&gt;\n  filter(num_episodes &gt;= 12)\n\n\ndatatable(series_num_epis)\n\n\n\n\n\nWe have over 20K TV series with 12 or more episodes.\n\n# join tv episodes and series data with ratings data\n\nep_filtered_series_ratings &lt;- inner_join(ep_filtered_series,\n  title_ratings,\n  by = \"tconst\"\n)\n\n# drop all tv series with fewer than 12 episodes\n\nep_filtered_series_ratings2 &lt;- inner_join(ep_filtered_series_ratings,\n  series_num_epis,\n  by = \"parentTconst\"\n)\n\n# calculate average ratings for tv series\n\nep_filtered_series_ratings2 |&gt;\n  group_by(parentTconst, primaryTitle.x) |&gt;\n  summarise(avg_rating = mean(averageRating)) |&gt;\n  ungroup() |&gt;\n  rename(\n    tv_series_id = parentTconst,\n    tv_series_title = primaryTitle.x\n  ) |&gt;\n  arrange(desc(avg_rating)) |&gt;\n  head(5) |&gt;\n  gt() |&gt;\n  tab_header(\n    title = \"Top 5 TV Series by Average Rating\",\n    subtitle = \"TV series with 12 or more episodes only\"\n  )\n\n\n\n\n\n\n\nTop 5 TV Series by Average Rating\n\n\nTV series with 12 or more episodes only\n\n\ntv_series_id\ntv_series_title\navg_rating\n\n\n\n\ntt0409579\nMade\n10.0\n\n\ntt11363282\nThe Real Housewives of Salt Lake City\n10.0\n\n\ntt21278628\nCowboys of Thunder\n10.0\n\n\ntt0060008\nThe Milton Berle Show\n9.9\n\n\ntt0168358\nParkinson\n9.9\n\n\n\n\n\n\n\nThere are 3 TV series that obtained the perfect 10/10 rating - ‘Made’,‘The Real Housewives of Salt Lake City’ and ‘Cowboys of Thunder’.\n\n\nQ6. Is it true that episodes from later seasons of Happy Days have lower average ratings than the early seasons?\nTo answer this question, we will use title basics,title episodes and title ratings data sets:\n\n# create df for TV series 'Happy Days'\n\nhd_df1 &lt;- title_basics |&gt;\n  filter(primaryTitle == \"Happy Days\" & titleType == \"tvSeries\")\n\n# join HD df with detailed TV episodes data\nhd_detail &lt;- inner_join(title_episodes, hd_df1, by = c(\"parentTconst\" = \"tconst\"))\n\n# join ratings data to detailed Happy Days records\n\nhd_detail_ratings &lt;- inner_join(hd_detail, title_ratings, by = \"tconst\")\n\ndatatable(hd_detail_ratings)\n\n\n\n\n\nNow that we have detailed records on all episodes of the Happy Days TV series, we can calculate the average rating for each season.\n\n# create df with average rating by season\n\navg_hd_detail_ratings &lt;- hd_detail_ratings |&gt;\n  group_by(season_number) |&gt;\n  summarise(avg_rating_season = mean(averageRating)) |&gt;\n  ungroup() |&gt;\n  arrange(season_number)\n\n# plot the resulting df\n\nfig_hd_seasons &lt;- plot_ly(\n  data = avg_hd_detail_ratings,\n  x = ~season_number,\n  y = ~avg_rating_season,\n  type = \"bar\",\n  marker = list(color = \"cerulean\"),\n  width = 500,\n  height = 300\n)\n\nfig_hd_seasons &lt;- fig_hd_seasons |&gt;\n  layout(title = \"Happy Days - Average Rating by Season\",\n         xaxis = list(title = \"Season #\"),\n         yaxis = list(title = \"Average Rating\")\n    )\n\nfig_hd_seasons\n\n\n\n\n\nIt appears that the earlier seasons of the series indeed had higher average ratings compared to the more recent seasons.\n\n\n\nTask 3\n\nDesign a ‘success’ measure for IMDb entries, reflecting both quality and broad popular awareness.\n\nAs we found in Q1 in Task1, movies constitute the absolute majority of records in our data - 131.6K records vs 29.8K for TV series, the next largest category of content. We do not include TV episode in this analysis as TV episodes are not a standalone content.\n\n# plot number of records by content type from the earlier question\n\nfig_content_count_type\n\n\n\n\n\nGiven the obvious differences in production, marketing, and audience appeal, we will focus on movies for this part of the exercise.\nLet’s start with creating a data frame with ratings data for movies.\n\n# create df with list of all movies\n\nlist_movies &lt;- title_basics |&gt;\n  filter(titleType == \"movie\") |&gt;\n  select(tconst, titleType, primaryTitle, start_year, genres, runtime_minutes, isAdult)\n\n# join with ratings data\n\nmovie_ratings_df &lt;- inner_join(list_movies, title_ratings, by = \"tconst\")\n\nmovie_ratings_df2 &lt;- movie_ratings_df |&gt;\n  rename(\n    title = primaryTitle,\n    title_id = tconst,\n    content_type = titleType,\n    year = start_year,\n    average_rating = averageRating,\n    number_of_votes = numVotes\n  )\n\n# sample movie df\n\nsample_n(movie_ratings_df2, 1000) |&gt;\n  DT::datatable()\n\n\n\n\n\nNext we will conduct an explanatory data analysis on our movies data set to better understand the two ratings metrics.\n\n# subset metrics\n\nmovie_ratings_df2_metrics &lt;- movie_ratings_df2 |&gt;\n  select(average_rating, number_of_votes)\n\n# describe metrics\n\nsummary(movie_ratings_df2_metrics)\n\n average_rating   number_of_votes  \n Min.   : 1.000   Min.   :    100  \n 1st Qu.: 5.200   1st Qu.:    195  \n Median : 6.100   Median :    459  \n Mean   : 5.923   Mean   :   8694  \n 3rd Qu.: 6.800   3rd Qu.:   1664  \n Max.   :10.000   Max.   :2942823  \n\n\n\n# histogram of average ratings\n\n# plot a histogram of number of ratings in plotly\navg_ratings_x &lt;- movie_ratings_df2$average_rating\n\nfig_hist_avg_ratings &lt;- plot_ly(\n  x = avg_ratings_x,\n  type = \"histogram\",\n  nbinsx = 100,\n  marker = list(color = \"cerulean\")\n) |&gt;\n  layout(\n    title = \"Distribution of Average Movie Ratings\",\n    xaxis = list(title = \"Average Rating\"),\n    yaxis = list(title = \"Frequency\")\n  )\n\nfig_hist_avg_ratings\n\n\n\n\n\n\n# histogram of average ratings\n\n# plot a histogram of number of ratings in plotly\n\nnum_ratings_x &lt;- movie_ratings_df2$number_of_votes\n\nfig_distr_number_ratings &lt;- plot_ly(\n  x = num_ratings_x,\n  type = \"histogram\",\n  nbinsx = 80,\n  marker = list(color = \"cerulean\")\n) |&gt;\n  layout(\n    title = \"Distribution of Movie Ratings\",\n    xaxis = list(title = \"Number of Ratings\"),\n    yaxis = list(type = \"log\", title = \"Frequency (Log-Scaled)\")\n  )\n\nfig_distr_number_ratings\n\n\n\n\n\nLooking at descriptive statistics and statistical plots, we can see that most titles have relatively high average ratings. 50% of all titles have a rating above 6.1, and top 25% of titles have a rating over 6.8. Distribution of number of ratings, on the other hand, has a right skew, meaning that we have only a handful of titles with a very high number of votes.\nSince we need to design a blended performance metric, we need to account for quality and popularity of a title simultaneously which can be done by an averaging of these two metrics. Before we proceed, we need to standardize the data to account for differences in magnitude and distribution of ratings and votes variables:\n\n# calculate mean and standard deviation for ratings and votes data\n\nmovie_ratings_df3 &lt;- movie_ratings_df2 |&gt;\n  mutate(\n    avg_ratings_movies = mean(average_rating),\n    avg_number_ratings = mean(number_of_votes),\n    sd_avg_ratings = sd(average_rating),\n    sd_number_ratings = sd(number_of_votes)\n  )\n\nsample_n(movie_ratings_df3, 1000) |&gt;\n  DT::datatable(options = list(\n    pageLength = 5\n  ))\n\n\n\n\n\nNow we can create standardized metrics for ratings and votes, as well as the blended performance index reflecting the quality of the movie (via average rating) and the popularity of the movie (via number of ratings), with equal weight given to each input.\n\n# create standardized metrics for votes and ratings\n\nmovie_ratings_df4 &lt;- movie_ratings_df3 |&gt;\n  mutate(\n    score_rating = round((average_rating - avg_ratings_movies) / sd_avg_ratings, 2),\n    score_votes = round((number_of_votes - avg_number_ratings) / sd_number_ratings, 2),\n    performance_index = round((score_rating + score_votes) / 2, 2)\n  )\n\nsample_n(movie_ratings_df4, 1000) |&gt;\n  DT::datatable(options = list(\n    pageLength = 5\n  ))\n\n\n\n\n\n\n# descriptive statistics for performance index\n\nmovie_ratings_df4_pi &lt;- movie_ratings_df4 |&gt;\n  select(performance_index)\n\nsummary(movie_ratings_df4_pi)\n\n performance_index  \n Min.   :-1.990000  \n 1st Qu.:-0.360000  \n Median : 0.030000  \n Mean   : 0.000264  \n 3rd Qu.: 0.310000  \n Max.   :27.490000  \n\n\n\n# histogram of performance index\n\npi_x2 &lt;- movie_ratings_df4$performance_index\n\nfig7 &lt;- plot_ly(\n  x = pi_x2,\n  type = \"histogram\",\n  nbinsx = 200,\n  marker = list(color = \"blue\")\n) |&gt;\n  layout(\n    title = \"Distribution of Movie Performance Indices\",\n    xaxis = list(title = \"Performance Index\"),\n    yaxis = list(title = \"Frequency\")\n  )\n\nfig7\n\n\n\n\n\n\n# % of titles with negative PI\n\nmovie_ratings_df4_pi |&gt;\n  summarise(\n    titles_with_negative_pi = sum(performance_index &lt; 0),\n    all_titles = n()\n  ) |&gt;\n  mutate(share_of_titles_with_negative_pi = round(titles_with_negative_pi / all_titles, 2)) |&gt;\n  gt()\n\n\n\n\n\n\n\ntitles_with_negative_pi\nall_titles\nshare_of_titles_with_negative_pi\n\n\n\n\n61673\n131662\n0.47\n\n\n\n\n\n\n\nPerformance index penalizes titles with subpar, i.e., below average, popularity and/or quality. 47% of movies in our data set have negative performance index.\n\nPerformance Index Validation\n\n1.Choose the top 5-10 movies on your metric and confirm that they were indeed box office successes.\n\n\n# top 5 movies\n\nmrdf &lt;- movie_ratings_df4 |&gt;\n  select(title, year, genres, average_rating, number_of_votes, performance_index)\n\nmrdf |&gt;\n  arrange(performance_index) |&gt;\n  slice_max(performance_index, n = 5) |&gt;\n  gt() |&gt;\n  tab_header(\n    title = \"Top 5 Movies by Peformance Index\"\n  )\n\n\n\n\n\n\n\nTop 5 Movies by Peformance Index\n\n\ntitle\nyear\ngenres\naverage_rating\nnumber_of_votes\nperformance_index\n\n\n\n\nThe Shawshank Redemption\n1994\nDrama\n9.3\n2942823\n27.49\n\n\nThe Dark Knight\n2008\nAction,Crime,Drama\n9.0\n2922922\n27.20\n\n\nInception\n2010\nAction,Adventure,Sci-Fi\n8.8\n2595555\n24.20\n\n\nFight Club\n1999\nDrama\n8.8\n2374722\n22.23\n\n\nForrest Gump\n1994\nDrama,Romance\n8.8\n2301630\n21.57\n\n\n\n\n\n\n\nAmong top 5 movies based on performance index, four (with the exception of The Shawshank Redemption) were commercial successes, and The Shawshank Redemption is still widely considered to be one of the beloved and most critically acclaimed movies of all times.\n\n\nChoose 3-5 movies with large numbers of IMDb votes that score poorly on your success metric and confirm that they are indeed of low quality.\n\n\n\n# add this to top line to change plot size: , fig.width=4,fig.height=4}\n\n\n# plot ratings and votes data\n\ngfig &lt;- ggplot(data = movie_ratings_df2, aes(x = average_rating, y = number_of_votes)) +\n  geom_point(size = 1, color = \"blue\") +\n  labs(\n    title = \"Movie Quality (Average Rating) and Popularity (Number of Ratings)\",\n    x = \"Average Rating\",\n    y = \"Number of Ratings\"\n  ) +\n  theme_minimal() +\n  theme_bw() +\n  scale_x_log10(label = scales::comma) +\n  scale_y_log10(label = scales::comma) \n\n\ngfig\n\n\n\n\n\n\n\n\nAs seen on this chart, we should have a decent number of movies with average rating of 1-2 and 80K-100K number of ratings, so we will look up titles meeting these criteria:\n\nmovie_ratings_df4 |&gt;\n  filter(average_rating &lt; 3 & number_of_votes &gt;= 75000) |&gt;\n  arrange(desc(performance_index)) |&gt;\n  select(title, year, genres, average_rating, number_of_votes, performance_index) |&gt;\n  gt()\n\n\n\n\n\n\n\ntitle\nyear\ngenres\naverage_rating\nnumber_of_votes\nperformance_index\n\n\n\n\nRadhe\n2021\nAction,Crime,Thriller\n1.9\n180205\n-0.04\n\n\nAdipurush\n2023\nAction,Adventure,Drama\n2.7\n133981\n-0.13\n\n\nMeet the Spartans\n2008\nComedy,Fantasy\n2.8\n112199\n-0.29\n\n\nEpic Movie\n2007\nAdventure,Comedy,Fantasy\n2.4\n110222\n-0.47\n\n\nBattlefield Earth\n2000\nAction,Adventure,Sci-Fi\n2.5\n83786\n-0.66\n\n\nDragonball Evolution\n2009\nAction,Adventure,Fantasy\n2.5\n80118\n-0.70\n\n\nDisaster Movie\n2008\nComedy,Sci-Fi\n1.9\n95170\n-0.80\n\n\nJustin Bieber: Never Say Never\n2011\nDocumentary,Music\n1.7\n76466\n-1.04\n\n\nSadak 2\n2020\nAction,Drama\n1.2\n96825\n-1.06\n\n\n\n\n\n\n\nIndeed, these movies score very poorly on the performance index, and while they have a relatively large volume of ratings, they also have low average ratings.\n\n\nChoose a prestige actor or director and confirm that they have many projects with high scores on your success metric.\n\n\nSteven Spielberg, one of the most famous and successful directors of our time, has 4 very successful projects with performance index of ranging from 4.65 to 14.54, which puts these titles in top 1% of all movies in our data set.\n\n# get title records for Steven Spielberg\n\nbp_df &lt;- name_basics |&gt;\n  filter(primaryName == \"Steven Spielberg\") |&gt;\n  select(primaryName, knownForTitles) |&gt;\n  separate_longer_delim(knownForTitles, \",\")\n\n# map titles names and types on the list of selected content IDs\n\nbp_df2 &lt;- inner_join(bp_df, title_basics, by = c(\"knownForTitles\" = \"tconst\"))\nbp_df3 &lt;- bp_df2 |&gt;\n  select(primaryName, knownForTitles, titleType, primaryTitle) |&gt;\n  rename(\n    name = primaryName,\n    title_id = knownForTitles,\n    content_type = titleType,\n    content_title = primaryTitle\n  )\n\n#select performance index and title\nmovie_pi_df &lt;- movie_ratings_df4 |&gt;\n  select(title_id, average_rating, number_of_votes, performance_index)\n\n# join to SS records\nbp_df4 &lt;- inner_join(bp_df3, movie_pi_df, by = \"title_id\")\ndatatable(bp_df4)\n\n\n\n\n\n\n# percentiles for performance index\n\nquantile(movie_ratings_df4$performance_index, probs = c(0,0.125,0.375,0.625,0.875,0.9,0.95,0.99,1))\n\n   0% 12.5% 37.5% 62.5% 87.5%   90%   95%   99%  100% \n-1.99 -0.67 -0.16  0.16  0.51  0.58  0.78  2.00 27.49 \n\n\n\n\nPerform at least one other form of ‘spot check’ validation.\n\n\nAvatar, the highest-grossing movie of all times ($2.9B worldwide gross) has a performance index of 13.2, which puts it in top 1% of our data set.\n\n#select performance index and title\n\nmovie_ratings_df4 |&gt;\n  select(title,genres,year, average_rating, number_of_votes, performance_index) |&gt;\n  filter((title==\"Avatar\") & (year==2009)) |&gt;\n  gt()\n\n\n\n\n\n\n\ntitle\ngenres\nyear\naverage_rating\nnumber_of_votes\nperformance_index\n\n\n\n\nAvatar\nAction,Adventure,Fantasy\n2009\n7.9\n1402915\n13.2\n\n\n\n\n\n\n\n\n\nCome up with a numerical threshold for a project to be a ‘success’; that is, determine a value such that movies above are all “solid” or better.\n\n\n\n# percentiles for performance index\n\nquantile(movie_ratings_df4$performance_index, probs = c(0,0.10,0.20,0.40,0.50,0.60,0.80,0.95,1))\n\n   0%   10%   20%   40%   50%   60%   80%   95%  100% \n-1.99 -0.74 -0.47 -0.12  0.03  0.12  0.38  0.78 27.49 \n\n\nWe will use 0.38 (top 20% score cutoff) as a threshold of success - titles with performance index of 0.38 or higher are high performers.\n\n\nTask 4: Trends in Success Over Time\nWe need to review our records in the context of distribution of titles by decade and genre.\nDue to a low volume of production and a stable share of successful productions over time, we can exclude data prior to 1970.\n\n# add new columns for decade and success\n movie_ratings_df4&lt;-movie_ratings_df4 |&gt;\n  mutate(decade=floor(year/10)*10,\n         success_flag=case_when(\n           performance_index&gt;0.38~1,\n            performance_index&lt;=0.38~0)\n         )\n\nmovie_ratings_df4_agg_decade&lt;-movie_ratings_df4 |&gt;\n  select (title_id, title,genres,decade,year,performance_index,success_flag) |&gt;\n  group_by(decade) |&gt;\n  summarise(number_of_titles=n(),\n            number_of_successes=sum(success_flag==1),\n            number_of_flops=sum(success_flag==0)) |&gt;\n  ungroup()\n\n# plot the resulting df\n\nfig_decade &lt;- plot_ly(\n  data = movie_ratings_df4_agg_decade,\n  x = ~decade,\n  y = ~number_of_successes,\n  type = \"bar\",\n  name='number of successes',\n#  marker = list(color = \"blue\"),\n  width = 500,\n  height = 300\n) |&gt;\n  add_trace(y=~number_of_flops, name='number of flops') \n\n\nfig_decade &lt;- fig_decade |&gt;\n  layout(\n    title = \"Titles by Decade\",\n    xaxis = list(title = \"Decade\"),\n    yaxis = list(title = \"Count of Titles\"),\n    barmode='stack'\n  )\n\nfig_decade\n\n\n\n\n\n\n#create a df for genres\n\nmovie_ratings_df4_agg_genres&lt;-movie_ratings_df4 |&gt;\n  select (title_id, title,genres,decade,year,performance_index,success_flag) |&gt;\n  group_by(genres) |&gt;\n  summarise(number_of_titles=n(),\n            number_of_successes=sum(success_flag==1),\n            number_of_flops=sum(success_flag==0)) |&gt;\n  arrange(desc(number_of_titles)) |&gt;\n  ungroup()\n\n# plot the resulting df\n\nfig_genres &lt;- plot_ly(\n  data = movie_ratings_df4_agg_genres,\n  x = ~reorder(genres,-number_of_titles),\n  y = ~number_of_titles,\n  type = \"bar\",\n  marker = list(color = \"blue\")\n\n)\n\nfig_genres &lt;- fig_genres |&gt;\n  layout(\n    title = \"Count of Titles by Genre\",\n    xaxis = list(title = \"Genres\",\n                 tickangle = -45,\n                 tickfont = list(size = 8)),\n    yaxis = list(title = \"Count of Titles\")\n  )\n\nfig_genres\n\n\n\n\n\nWe have a very large number of genres with only a handful of titles, so we can exclude these records from our data set to ensure our analysis is as robust as possible.\n\n#top 20 genres by count of titles  \n\nmovie_ratings_df4_top20_genres&lt;-movie_ratings_df4_agg_genres |&gt;\n  slice_max(number_of_titles,n=20)\n  \n# subset data by decade and aggregate count successes and flops\n  \nmovie_ratings_df4_decade_genres&lt;-movie_ratings_df4 |&gt;\n  filter(year&gt;=1970) |&gt;\n  select (title_id, title,genres,decade,year,success_flag) |&gt;\n  group_by(genres,decade) |&gt;\n  summarise(number_of_titles=n(),\n            number_of_successes=sum(success_flag==1),\n            number_of_flops=sum(success_flag==0)) |&gt;\n  mutate(percent_of_success=round(number_of_successes/number_of_titles,2)) |&gt;\n  ungroup()  \n\nmovie_ratings_df4_decade_genres_filtered&lt;-inner_join(movie_ratings_df4_decade_genres,\n                                                     movie_ratings_df4_top20_genres,\n                                                     by=\"genres\") |&gt;\n  select(genres,decade,number_of_titles.x,number_of_successes.x,number_of_flops.x,percent_of_success) |&gt;\n  rename(number_of_titles=number_of_titles.x,\n         number_of_successes=number_of_successes.x,\n         number_of_flops=number_of_flops.x\n         )\n\ndatatable(movie_ratings_df4_decade_genres_filtered)\n\n\n\n\n\n\n1.What was the genre with the most “successes” in each decade?\n\nDrama produced more successes than other genres in 1970s (292 titles), 1980s (341 titles),and 1990s (334 titles). Starting in 2000s, Documentary took over with 747 successes in 2000s, 1290 successes in 2010, and 593 successful titles in 2020.\n\n#subset successes by genre and decade\n\nmovie_ratings_df4_decade_genres_filtered_successes_pw&lt;-pivot_wider(\n  movie_ratings_df4_decade_genres_filtered,\n  id_cols = genres,\n  names_from =decade ,\n  values_from = number_of_successes\n) \n\n\n  \ndatatable(movie_ratings_df4_decade_genres_filtered_successes_pw)\n\n\n\n\n\n\n\nWhat genre consistently has the most “successes”?\n\n\nDrama and documentary collectively produced more successes than other genres (2915 and 2868, respectively), with Documentary emerging as a leading genre in recent decades (2000- present).\n\ngp1&lt;-ggplot(movie_ratings_df4_decade_genres_filtered,\n            aes(x = decade, y = number_of_successes)\n            ) +\n  geom_col(fill='green4') +\n  labs(title = \"Successful Productions by Genre\",\n       x = \"Decade\", \n       y = \"Successful Productions\") +\n  geom_text(aes(label = number_of_successes), \n            position = position_stack(vjust = 2),  # Place labels outside the bars\n            size = 2) +\n  facet_grid(. ~ genres)+\n  facet_wrap(~genres,ncol=4, strip.position = \"top\")+\n  theme_minimal() +\n  theme (\n    axis.text.x = element_text(size = 8),  \n    axis.text.y = element_text(size = 8), \n    axis.title.x = element_text(size = 10),  \n    axis.title.y = element_text(size = 10),\n    plot.title = element_text(hjust = 0.5, size = 14)\n  )\n\ngp1\n\n\n\n\n\n\n\n\n\n\nWhat genre has produced the most “successes” since 2010? Does it have the highest success rate or does it only have a large number of successes because there are many productions in that genre?\n\n\n\n# create a custom color palette\npalette_genres3&lt;-c(\n  \"dodgerblue2\", \"#E31A1C\", \"green4\",\"#6A3D9A\",\"#FF7F00\",\n  \"black\", \"yellow\",\"skyblue2\", \"#FB9A99\",\"palegreen2\",\n  \"#CAB2D6\",\"#FDBF6F\",\"gray70\", \"khaki2\", \"maroon\", \n  \"orchid1\", \"deeppink1\", \"blue1\", \"steelblue4\",\"darkturquoise\",\n  \"green1\", \"yellow4\", \"yellow3\",\"darkorange4\", \"brown\")\n\n#create a chart\n\nfig_top20g &lt;- plot_ly(movie_ratings_df4_decade_genres_filtered,\n               x = ~decade, y = ~percent_of_success, \n               color = ~genres,\n               type = 'scatter',\n               mode = 'lines',\n               colors = palette_genres3\n               )|&gt;\n  layout(\n    title = \"Top 20 Genres - Percent of Success by Decade\",\n    xaxis = list(title = \"\"),\n    yaxis = list(\n      title = \"Percent of Success\",\n      tickformat = \".0%\",\n      range = c(0, 1)\n      ),\n    legend = list(\n    orientation = 'h',  # Horizontal legend \n    x = 0.5,            # Center horizontally\n    xanchor = 'center', # Align center\n    y = -0.2,           # Position below the plot\n    font = list(size =8 )  # Smaller font size\n    )\n  )\n\n# Show the plot\n\nfig_top20g\n\n\n\n\n\nDocumentary has produced most successful titles since 2010.\n\n4.What genre has become more popular in recent years?\n\nThere has been a spike in success rate for Action genre, going from 5% in 2010s to 21% in 2020s.\nBased on success rate, documentary is a clear standout and should be prioritized for investment opportunity.\n\n\nTask 5: Key Personnel\n\nIdentify (at least) two actors and one director who you will target as the key talent for your movie. Write a short “pitch” as to why they are likely to be successful. You should support your pitch with at least one graphic and one table.\n\nSince we are going to be developing a documentary title, we need to adjust this question a bit and identify a director-writer-producer team as opposed to a director-actors team.\n\n#get a list of titles in documentary genre, made after 1970 , with sufficient level of awareness and high performance index and map director and writer info\n\ndoc_df1&lt;-sqldf(\n\"\n    with a as(\n    select title_id,\n    title,\n    decade,\n    performance_index,\n    average_rating,\n    number_of_votes,\n    success_flag\n    from movie_ratings_df4\n    where 1=1\n    and genres='Documentary'\n    and year&gt;=1970\n   and success_flag=1\nand number_of_votes&gt;=5000\n    )\n    select a.*,\n    t.directors,\n    t.writers,\n    n.primaryName as director_name,\n    n2.primaryName as writer_name,\n    tb.start_year\n    from a\n    inner join title_crew t\n    on a.title_id=t.tconst\n    inner join name_basics n\n    on directors=n.nconst\n    inner join name_basics n2\n    on t.writers=n2.nconst\n    inner join title_basics tb\n    on a.title_id=tb.tconst\n    order by a.performance_index desc, a.number_of_votes desc, a.average_rating desc\n    \n    ;\n  \"\n  )  \n  \ndatatable(doc_df1)\n\n\n\n\n\n\ndoc_df2&lt;-sqldf(\n\"\nselect director_name,\nwriter_name,\ndirector_name||'-'||writer_name as movie_team,\ncount(title_id) as cnt_movies,\navg(performance_index) as avg_performance_index,\navg(average_rating) as avg_rating,\navg(number_of_votes) as avg_number_of_ratings\nfrom doc_df1\ngroup by 1,2,3\nhaving count(title_id)&gt;1\norder by 4 desc\n    ;\n  \"\n  )\n\ndoc_df2\n\n   director_name   writer_name                  movie_team cnt_movies\n1  Werner Herzog Werner Herzog Werner Herzog-Werner Herzog          3\n2  Michael Moore Michael Moore Michael Moore-Michael Moore          2\n3 Sophie Fiennes  Slavoj Zizek Sophie Fiennes-Slavoj Zizek          2\n  avg_performance_index avg_rating avg_number_of_ratings\n1                  0.59       7.30              14358.33\n2                  0.69       7.35              24127.50\n3                  0.68       7.70               7500.00\n\n\nLooking at the high-performing documentaries from 1970s - present, 3 film makers have produced multiple successful titles: Werner Herzog, Michael Moore and the director-writer duo of Sophie Fiennes and Slavoj Zizek. Since we need to identify a team for our next project, we propose to approach the Fiennes-Zizek duo as they have already demonstrated they can successfully work together, which might not be the case for established solo creators Moore and Herzog.\n\n# plot movie team data\n\n\nfig_movie_team&lt;-plot_ly(data=doc_df2,\n                        x = ~avg_rating,\n                        y = ~avg_number_of_ratings,\n                        type = 'scatter',\n                        mode = 'markers',\n                        color=~movie_team\n                        #,\n                        # width = 500,\n                        #height = 500\n                        ) |&gt;\n   layout(\n    title = \"Movie Team Performance Comparison\",\n    xaxis = list(title = \"Quality (Average Rating)\"),\n    yaxis = list(\n      title = \"Popularity (Number of Ratings)\"),\n    legend = list(\n    orientation = 'h',  # Horizontal legend \n    x = 0.5,            # Center horizontally\n    xanchor = 'center', # Align center\n    y = -0.2\n    #,           # Position below the plot\n   # font = list(size =8 )  # Smaller font size\n    )\n  )\n \nfig_movie_team\n\n\n\n\n\nTitles produced by Moore and Herzog appear to have a higher awareness among viewers but Fiennes-Zizek work is not far behind, and a more polarizing topic and a targeted marketing and PR campaign can help address this slight shortcoming.\n\n\nTask 6: Finding a Classic Movie to Remake\n\nFind a classic movie to remake with your key talent. The original should have a large number of IMDb ratings, a high average rating, and not have been remade in the past 25 years.\n\nWhen looking at the top documentary titles, __Super Size Me_ is a definite outlier: &gt;Super Size Me premiered at the 2004 Sundance Film Festival, where Morgan Spurlock won the Grand Jury Prize for directing the film.The film opened in the US on May 7, 2004, and grossed a total of $11,536,423 worldwide, making it the 7th highest-grossing documentary film of all time.It was nominated for an Academy Award for Best Documentary Feature and won the award for Best Documentary Screenplay from the Writers Guild of America.\n(Source)\nA 2017 title Super Size Me 2: Holy Chicken! from the same director also performed reasonably well, even in the light of certain issues with with publicity and distribution. It’s important to note that this film was not a remake of a original title as it was focused on the process of opening a fast-food restaurant. (Source)\nGiven the success of the 2004 ‘Super Size Me’ and increasing popularity of the semaglutide drugs, we should consider making a documentary about a weight loss journey and impact of taking this medicine on one’s life, health and mind - a ‘Super Size Me’ journey in reverse. While this movie was released 20 years ago, cultural context, relevancy and timeliness play a huge role in documentary titles success, and for this topic the time is definitely now. Another reason to pursue this opportunity now is an unhappy one as Morgan Spurlock, the writer and director of both ‘Super Size Me’ titles, died in May of this year so re imagining his most famous work could serve as a tribute to Spurlock’s many talents and the impact his vision and creative genius left on our society. As a possible contributor to our project, We can consider Lee Fulkerson, who wrote and directed an award-winning and highly acclaimed documentary Forks Over Knives as he has already successfully explored the topic of self-improvement in his 2011 movie (performance index of 0.73).\n\n\nTask 7: Write and Deliver Your Pitch\nFrom Sophie Fiennes and Slavoj Zizek, the masters of philosophical and psychoanalytical exploration, and Lee Fulkerson, the visionary mind behind an inspiring story of human transformation, inspired by a critically acclaimed hit Super Size Me, comes the modern take on a timeless tale of metamorphosis, obsession and desire to be perfect at any cost. XXS Me: The Beginning coming to Netflix in December 2025."
  }
]