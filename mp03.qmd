
---
title: "Mini-Project 03: Do Proportional Electoral College Allocations Yield a More Representative Presidency?"
---
In this mini-project, we will investigate the claim that the US Electoral College systematically biases election results away from the popular vote.

#### Data Prep  
First, we will obtain and prepare data for analysis.   
__Installing and Loading Libraries__
```{r echo=TRUE, warning=FALSE, message=FALSE}
#| code-fold: true
#| code-summary: "Show the code"

# Installing and loading libraries

if (!require("tidyverse")) install.packages("tidyverse")
library(tidyverse)
if (!require("DT")) install.packages("DT")
library(DT)
if (!require("dplyr")) install.packages("dplyr")
library(dplyr)
if (!require("psych")) install.packages("psych")
library(psych)
if (!require("gt")) install.packages("gt")
library(gt)
if (!require("formattable")) install.packages("formattable")
library(formattable)
if (!require("sqldf")) install.packages("sqldf")
library(sqldf)
if (!require("plotly")) install.packages("plotly")
library(plotly)
if (!require("ggplot2")) install.packages("ggplot2")
library(ggplot2)
if (!require("RColorBrewer")) install.packages("RColorBrewer")
library(RColorBrewer)
if (!require("sf")) install.packages("sf")
library(sf)
```

#### Task 1.Download Congressional Shapefiles 1976-2012
>Download congressional shapefiles from Lewis et al. for all US Congresses5 from 1976 to 2012.
Your download code should:
1)Be fully automated (no “hand-downloading”);
2)Download files with a systematic and interpretable naming convention
3)Only download files as needed out of courtesy for the data provider’s web sever. That is, if you already have a copy of the file, do not re-download it repeatedly.

The code below will download files to a local folder per instructions. 
```{r echo=TRUE, warning=FALSE, message=FALSE, eval=FALSE}
#| code-fold: true
#| code-summary: "Show the code"

td <- tempdir()

for (i in 94:112) {
  fname <- paste0("districts", formatC(i, width = 3, format = "d", flag = "0"), ".zip")

  if (!file.exists(fname)) {
    url <- paste0("https://cdmaps.polisci.ucla.edu/shp/", fname)

    download.file(url, destfile = fname)

    zip_contents <- unzip(fname, exdir = td)
    shp_file <- zip_contents[grepl("shp$", zip_contents)]
    sf_data <- read_sf(shp_file)

    assign(paste0("districts", formatC(i, width = 3, format = "d", flag = "0"), "_sf"), sf_data)
  }
}
```
#### Task 2.Download Congressional Shapefiles 2014-2022
>Download congressional shapefiles from the US Census Bureau for all US Congresses from 2014 to 2022.
Your download code should:
1)Be fully automated (no “hand-downloading”);
2)Download files with a systematic and interpretable naming convention
3)Only download files as needed out of courtesy for the data provider’s web sever. That is, if you already have a copy of the file, do not re-download it repeatedly.

The code below will download files to a local folder per instructions. 
```{r echo=TRUE, warning=FALSE, message=FALSE, eval=FALSE}
#| code-fold: true
#| code-summary: "Show the code"

for (i in 2014:2022) {
  BASE_URL <- "https://www2.census.gov/geo/tiger/"
  if (i >= 2018) {
    file <- paste0("TIGER", sprintf("%d", i), "/CD/tl_", sprintf("%d", i), "_us_cd116.zip")
  } else if (i > 2015) {
    file <- paste0("TIGER", sprintf("%d", i), "/CD/tl_", sprintf("%d", i), "_us_cd115.zip")
  } else {
    file <- paste0("TIGER", sprintf("%d", i), "/CD/tl_", sprintf("%d", i), "_us_cd114.zip")
  }
  download_name <- paste0("TIGER", sprintf("%d", i), ".zip")

  if (!file.exists(download_name)) {
    FILE_URL <- paste0(BASE_URL, file)
    print(FILE_URL)
    download.file(FILE_URL, destfile = download_name, mode = "wb")
  }
}
```


#### Task 3: Exploration of Vote Count Data  

>1. Q1. Which states have gained and lost the most seats in the US House of Representatives between 1976 and 2022?

Before we proceed to analyzing data, it's worth noting that states lose and gain seats in the U.S. House of Representatives based on changes in their population as measured by the U.S. Census. The number of House seats is fixed at 435, so after each Census, which is conducted every ten years, seats are reapportioned among the states to reflect population shifts. The population used for this calculation includes all residents, regardless of age, citizenship, or legal status.
([Source](https://www.visitthecapitol.gov/sites/default/files/documents/resources-and-activities/CVC_HS_ActivitySheets_CongApportionment.pdf))

```{r echo=TRUE, warning=FALSE, message=FALSE}
#| code-fold: true
#| code-summary: "Show the code"

## read in presidential elections data

pres <- read.csv("president_1976_2020.csv")
# head(pres)

# read in house election vote data

house <- read.csv("house_1976_2022.csv")
# head(house)

## create a df with house results for 1976 and 2022

house_1976_and_2022 <- sqldf(
  "
   with h76 as (
   select state,
   max(district) as num_seats
   from house
   where 1=1
   and year=1976
   group by 1
   )
   ,
   h22 as (
   select state,
   max(district) as num_seats
   from house
   where 1=1
   and year=2022
   group by 1
   )
   ,
   base as (
   select h76.state,
   h76.num_seats,
   case
   when h76.num_seats=0 then 1
   else h76.num_seats
   end as number_of_seats_1976,
   h22.num_seats,
   case
   when h22.num_seats=0 then 1
   else h22.num_seats
   end as number_of_seats_2022
   from h76
   left join h22
   on h76.state=h22.state
   )

   select state,
   number_of_seats_1976,
   number_of_seats_2022,
   number_of_seats_2022 - number_of_seats_1976 as delta
   from base
    ;
  "
)


# display states with largest gains in number of house seats from 1976 to 2022

house_1976_and_2022 |>
  slice_max(delta, n = 5) |>
  gt() |>
  tab_header(
    title = "Top 5 States with Largest Gains in House Seats"
  )
```
Texas, Florida, California, Arizona and Georgia had largest gains in house seats between 1976 and 2022.

```{r echo=TRUE, warning=FALSE, message=FALSE}
#| code-fold: true
#| code-summary: "Show the code"

# display states with largest losses in number of house seats from 1976 to 2022

house_1976_and_2022 |>
  slice_min(delta, n = 5) |>
  gt() |>
  tab_header(
    title = "Top 5 States with Largest Losses in House Seats"
  )
```
New York, Ohio, Pennsylvania, Illinois and Michigan had largest losses in house seats between 1976 and 2022.


>Q2. New York State has a unique “fusion” voting system where one candidate can appear on multiple “lines” on the ballot and their vote counts are totaled. For instance, in 2022, Jerrold Nadler appeared on both the Democrat and Working Families party lines for NYS’ 12th Congressional District. He received 200,890 votes total (184,872 as a Democrat and 16,018 as WFP), easily defeating Michael Zumbluskas, who received 44,173 votes across three party lines (Republican, Conservative, and Parent). Are there any elections in our data where the election would have had a different outcome if the “fusion” system was not used and candidates only received the votes their received from their “major party line” (Democrat or Republican) and not their total number of votes across all lines?

To answer this question, first we are going to find states, years, and districts where fusion system was used in elections. We can do that by identifying instances where candidates received votes from multiple parties. Then we will recalculate the results of these elections by excluding votes from candidates non-primary parties. Lastly, we will compare historic performance to results in our "what-if" scenario  and determine whether winners get to keep their win.
Here's a list of all elections where results would have been different in the absence of fusion system: 
```{r echo=TRUE, warning=FALSE, message=FALSE}
#| code-fold: true
#| code-summary: "Show the code"

# get a count of political parties candidates received votes from
house_temp1 <- house %>%
  group_by(state, year, district, candidate) |>
  summarize(distinct_party_count = n_distinct(party))

# get a list of districts where candidates received votes from more than 1 party
house_temp2 <- house_temp1 |>
  filter(distinct_party_count > 1)

# get a list of all years, states and districts where fusion system was used
house_temp3 <- house_temp2 |>
  group_by(state, year, district)

# subset house df to only include results from states, years and districts meeting the criteria

house_fusion1 <- inner_join(house, house_temp3, by = c("state" = "state", "year" = "year", "district" = "district"))

# get elections totals for each candidate in states/years/districts meeting the criteria
house_fusion1_actuals <- house_fusion1 |>
  group_by(year, state, district, candidate.x) |>
  summarise(actual_total_votes = sum(candidatevotes)) |>
  mutate(max_votes = max(actual_total_votes)) |>
  mutate(is_actual_winner = case_when(
    actual_total_votes == max_votes ~ 1,
    TRUE ~ 0
  )) |>
  ungroup()

# get candidate votes from their primary party only and determine a winner
house_fusion1_primaryonly <- house_fusion1 |>
  filter(party == "DEMOCRAT" | party == "REPUBLICAN") |>
  group_by(year, state, district, candidate.x) |>
  summarise(actual_primaryparty_votes = sum(candidatevotes)) |>
  mutate(max_primary_votes = max(actual_primaryparty_votes)) |>
  mutate(is_primaryvotesonly_winner = case_when(
    actual_primaryparty_votes == max_primary_votes ~ 1,
    TRUE ~ 0
  ))

# merge 2 datasets
house_fusion_merged <- left_join(house_fusion1_actuals,
  house_fusion1_primaryonly,
  by = c(
    "state" = "state",
    "year" = "year",
    "district" = "district",
    "candidate.x" = "candidate.x"
  )
)
# filter for records where primary party is either D or R and determine if results would have been different
house_fusion_merged_filtered <- house_fusion_merged |>
  select(year, state, district, candidate.x, actual_total_votes, actual_primaryparty_votes, is_actual_winner, is_primaryvotesonly_winner) |>
  mutate(same_winner = case_when(
    is_actual_winner == is_primaryvotesonly_winner ~ 1,
    TRUE ~ 0
  )) |>
  filter((same_winner == 0) & !is.na(actual_primaryparty_votes))

# display a list of states, years and districts where election results would have been different

house_fusion_merged_filtered |>
  select(year, state, district, is_actual_winner) |>
  group_by(year, state, district) |>
  summarise(num_elections = sum(is_actual_winner)) |>
  ungroup() |>
  select(-num_elections) |>
  gt() |>
  tab_header(
    title = "List of Elections With  Different Results"
  )
```

```{r echo=TRUE, warning=FALSE, message=FALSE}
#| code-fold: true
#| code-summary: "Show the code"

cnt_fusion_elections <- sqldf(
  "
  select 'all fusion elections' as elections,
  count(distinct year||state||district) as count_elections
  from house_fusion_merged
  group by 1

  union all

  select 'fusion elections with different outcomes' as elections,
  count(distinct year||state||district) as count_elections
  from house_fusion_merged
  where 1=1
  and is_actual_winner!=is_primaryvotesonly_winner
  group by 1
  ;
  "
)

cnt_fusion_elections |>
  gt() |>
  tab_header(
    title = "Fusion Elections - Summary Results"
  )
```



Based on these results, we ascertain that the use of fusion system in elections has no discernible effect on the outcome as the results would have been different only in a handful of cases (24 out of 754 elections, or 3.2%).

>Q3. Do presidential candidates tend to run ahead of or run behind congressional candidates in the same state? That is, does a Democratic candidate for president tend to get more votes in a given state than all Democratic congressional candidates in the same state? Does this trend differ over time? Does it differ across states or across parties? Are any presidents particularly more or less popular than their co-partisans?

To answer these questions, first we need to get results of Presidential and Congressional elections for every state for 12 years when Presidential elections were held. (You can look up results of individual states in the table below.)
```{r echo=TRUE, warning=FALSE, message=FALSE}
#| code-fold: true
#| code-summary: "Show the code"

# get a df with results of presidential elections by state filtered to R and D candidates only

pres_df1 <- sqldf(
  "
  with a as(
  select year,
  state,
  candidate,
  party_simplified as party,
  candidatevotes as votes
  from pres
  where 1=1
  and PARTY_SIMPLIFIED in ('DEMOCRAT','REPUBLICAN')
  GROUP BY 1,2,3,4
  )
  ,
  b as (
  select a.*,
  row_number() over(partition by year,state order by votes desc) as is_winner
  from a
  )

  select year,
  state,
  candidate,
  party,
  votes,
  case
  when is_winner=1 then 1 else 0 end as is_pres_winner
  from b
  ;
  "
)


# get a df with records for house elections filtered to D and R only

house_prim_only <- house |>
  filter(party == "DEMOCRAT" | party == "REPUBLICAN") |>
  group_by(year, state, party) |>
  summarize(total_party_votes = sum(candidatevotes)) |>
  ungroup()

# determine  max votes by year/state elections
house_prim_only_agg <- house_prim_only %>%
  group_by(year, state) %>%
  summarize(max_votes = max(total_party_votes, na.rm = TRUE)) |>
  ungroup()

# merge 2 dfs

house_prim_only_merged <- left_join(house_prim_only,
  house_prim_only_agg,
  by = c("state" = "state", "year" = "year")
)

# identify a winning party in congressional election

house_prim_only_merged2 <- house_prim_only_merged |>
  mutate(house_party_winner = case_when(
    total_party_votes == max_votes ~ 1,
    TRUE ~ 0
  ))


# join dfs with house and presidential results

house_pres_merged <- inner_join(pres_df1,
  house_prim_only_merged2,
  by = c(
    "year" = "year",
    "state" = "state",
    "party" = "party"
  )
)
# rename columns for clarity

house_pres_merged_for_plot <- house_pres_merged |>
  select(year, state, candidate, party, votes, is_pres_winner, total_party_votes, house_party_winner) |>
  rename(
    presidential_votes = votes,
    is_party_winner = house_party_winner
  ) |>
  mutate(president_more_votes = case_when(
    presidential_votes > total_party_votes ~ 1,
    TRUE ~ 0
  )) |>
  mutate(delta_votes = presidential_votes - total_party_votes)

# create a df for D party
dem_party <- house_pres_merged_for_plot |>
  filter(party == "DEMOCRAT") |>
  group_by(state) |>
  summarize(
    D_president_more_popular_than_cogress = sum(president_more_votes),
    D_president_more_popular_share = D_president_more_popular_than_cogress / 12,
    D_avg_difference_votes = mean(delta_votes)
  ) |>
  ungroup() |>
  mutate(D_avg_delta_votes_ranked = rank(-D_avg_difference_votes, ties.method = "first"))

# create a df for R party
rep_party <- house_pres_merged_for_plot |>
  filter(party == "REPUBLICAN") |>
  group_by(state) |>
  summarize(
    R_president_more_popular_than_cogress = sum(president_more_votes),
    R_president_more_popular_share = R_president_more_popular_than_cogress / 12,
    R_avg_difference_votes = mean(delta_votes)
  ) |>
  ungroup() |>
  mutate(R_avg_delta_votes_ranked = rank(-R_avg_difference_votes, ties.method = "first"))



# join 2 dfs
dem_rep_df <- inner_join(dem_party, rep_party, by = c("state" = "state"))

# display the data
dem_rep_df |>
  mutate(
    R_president_more_popular_share = scales::percent(R_president_more_popular_share),
    D_president_more_popular_share = scales::percent(D_president_more_popular_share),
    R_avg_difference_votes = format(round(as.numeric(R_avg_difference_votes), 0), nsmall = 0, big.mark = ","),
    D_avg_difference_votes = format(round(as.numeric(D_avg_difference_votes), 0), nsmall = 0, big.mark = ",")
  ) |>
  DT::datatable(
    options = list(pageLength = 5),
    filter = "top"
  )
```

Now that we have records with Presidential and Congress election results for all states, we can answer this question. Across all states in 12 elections, Democratic candidates had more votes than all Congressional candidates from Democratic party in 53% of all cases. For Republican candidates, this number was even higher at 65%.
```{r echo=TRUE, warning=FALSE, message=FALSE}
#| code-fold: true
#| code-summary: "Show the code"

dem_rep_df %>%
  summarise(D_president_more_popular = mean(D_president_more_popular_share, na.rm = TRUE), R_president_more_popular = mean(R_president_more_popular_share, na.rm = TRUE)) %>%
  mutate(
    D_president_more_popular = scales::percent(D_president_more_popular),
    R_president_more_popular = scales::percent(R_president_more_popular)
  ) |>
  ungroup()
```

```{r echo=TRUE, warning=FALSE, message=FALSE}
#| code-fold: true
#| code-summary: "Show the code"

## display df by state


# display the data
dem_rep_df_plot <- dem_rep_df |>
  select(state, R_president_more_popular_share, D_president_more_popular_share) |>
  mutate(
    D_president_more_popular_share = scales::percent(D_president_more_popular_share),
    R_president_more_popular_share = scales::percent(R_president_more_popular_share)
  )

dem_rep_df_plot |>
  gt()
```



```{r echo=TRUE, warning=FALSE, message=FALSE}
#| code-fold: true
#| code-summary: "Show the code"



# plot states data

dem_rep_plot1 <- plot_ly(
  data = dem_rep_df,
  x = ~R_president_more_popular_share,
  y = ~D_president_more_popular_share,
  type = "scatter",
  mode = "markers",
  marker = list(size = 5),
  color = ~state
) |>
  layout(
    title = "",
    xaxis = list(
      title = "Popularity of R president vs Congress",
      font = 8,
      tickfont = list(size = 8),
      titlefont = list(size = 8)
    ),
    yaxis = list(
      title = "Popularity of D president vs Congress",
      font = 8,
      tickfont = list(size = 8),
      titlefont = list(size = 8)
    ),
    legend = list(
      font = list(size = 8),
      orientation = "h", # Horizontal legend
      x = 0.5, # Center horizontally
      xanchor = "center", # Align center
      y = -0.2,
      font = 8
    )
  )

dem_rep_plot1
```
Consistently with our previous findings, most states tend to favor presidential candidates more so than Congressional candidates, with this trend being more pronounced for Republican candidates. Notable exceptions are Nebraska, Alaska, Kansas, Delaware and Iowa, where Republican presidential candidates tend to receive fewer votes than Congressional hopefuls.


```{r echo=TRUE, warning=FALSE, message=FALSE}
#| code-fold: true
#| code-summary: "Show the code"

dem_win_year <- house_pres_merged_for_plot |>
  filter((party == "DEMOCRAT") & (president_more_votes == 1)) |>
  group_by(year, party) |>
  summarise(share_states_president_popular = n() / 51) |>
  ungroup()

rep_win_year <- house_pres_merged_for_plot |>
  filter((party == "REPUBLICAN") & (president_more_votes == 1)) |>
  group_by(year, party) |>
  summarise(share_states_president_popular = n() / 51) |>
  ungroup()

dem_rep_win_for_plot <- bind_rows(dem_win_year, rep_win_year)

dem_rep_win_for_plot2 <- dem_rep_win_for_plot |>
  ungroup()
```

```{r echo=TRUE, warning=FALSE, message=FALSE}
#| code-fold: true
#| code-summary: "Show the code"

# create a chart

drplot2 <- plot_ly(
  data = dem_rep_win_for_plot2,
  x = ~year, y = ~share_states_president_popular,
  color = ~party,
  type = "scatter",
  mode = "lines+markers"
) |>
  layout(
    title = "Share of States Favoring Presidential Candidates over Congressional",
    xaxis = list(title = ""),
    yaxis = list(
      title = "Share of States",
      tickformat = ".0%",
      range = c(0, 1)
    ),
    legend = list(
      orientation = "h", # Horizontal legend
      x = 0.5, # Center horizontally
      xanchor = "center", # Align center
      y = -0.2, # Position below the plot
      font = list(size = 8) # Smaller font size
    )
  )

drplot2
```

As we can see on this chart,  in Democratic party, presidential candidates are slowly but surely becoming more popular than their Congressional peers over last 30 years. At the same time, changes in preferences of Republican electorate appear more drastic. 

#### Task 4: Automate Zip File Extraction  
>Make a function read_shp_from_zip() which takes in a file name, pulls out the .shp file contained there in, and reads it into R using read_sf(). 

Here's the code for the function: 
```{r echo=TRUE, warning=FALSE, message=FALSE}
# create a function
read_shp_from_zip <- function(filename) {
  dest_dir <- tempdir()
  file <- unzip(zipfile = filename, exdir = dest_dir)
  shp_file <- file[grepl("\\.shp$", file)]
  sf <- read_sf(shp_file)
  return(sf)
}

# test a function
test_sf <- read_shp_from_zip("districts095.zip")
head(test_sf)
```



#### Task 5: Chloropleth Visualization of the 2000 Presidential Election Electoral College Results  

>Using the data you downloaded earlier, create a chloropleth visualization of the electoral college results for the 2000 presidential election (Bush vs. Gore), coloring each state by the party that won the most votes in that state.

To create this visualization, first we will determine the winning candidate/party for every state and we will use it to assign color values on the chrolopleth map.

```{r echo=TRUE, warning=FALSE, message=FALSE}
#| code-fold: true
#| code-summary: "Show the code"

# create a df with presidential election data

pres2000 <- sqldf(
  "
  with a as(
  select year,state,state_po,
  sum(case when party_simplified='DEMOCRAT' THEN candidatevotes else 0 end) as dem_votes,
  sum(case when party_simplified='REPUBLICAN' THEN candidatevotes else 0 end) as rep_votes
  from pres
  where 1=1
  and year=2000
  and party_simplified in ('DEMOCRAT','REPUBLICAN')
  group by 1,2,3
  )
  select year,
  state_po,
  dem_votes,
  rep_votes,
  case
  when dem_votes>rep_votes then 'Democrat' else 'Republican' end as party_won
  from a
  ;
  "
)

# create a df with ecv data

house2000 <- sqldf(
  "
   with h20 as (
   select
   state_po,
   max(district) as num_seats
   from house
   where 1=1
   and year=2000
   group by 1
   )
  ,
  base as (
   select
   state_po,
   case
   when num_seats=0 then 1
   else num_seats
   end as number_of_seats2000
   from h20
  )
  select
  state_po,
  number_of_seats2000+2 as ecv
  from base
    ;
  "
)

# join 2 dfs
ecv20_df <- inner_join(house2000, pres2000, by = c("state_po" = "state_po"))

###### -get a shapefile for map
map_sf <- read_shp_from_zip("tl_2020_us_state.zip")

# subset data - we only need state abbreviations and coordinates
state_map1 <- map_sf |>
  select(STUSPS, geometry)

# create a df with state boundaries and election data
el20_for_map <- inner_join(state_map1, ecv20_df, by = c("STUSPS" = "state_po"))
```

```{r, echo=TRUE, warning=FALSE, message=FALSE}
# create a plot for 2000 presidential election
ggplot(
  el20_for_map,
  aes(
    geometry = geometry,
    fill = party_won
  )
) +
  geom_sf() +
  scale_fill_manual(values = c(
    "Democrat" = "blue",
    "Republican" = "red"
  )) +
  ggtitle("2020 Election Results by State")
```

#### Task 6: Advanced Chloropleth Visualization of Electoral College Results  

>Modify your previous code to make either a faceted version showing election results over time. 

```{r echo=TRUE, warning=FALSE, message=FALSE}
#| code-fold: true
#| code-summary: "Show the code"

# create a df with presidential election data

pres_elections_temp <- pres |>
  filter(party_simplified == "DEMOCRAT" | party_simplified == "REPUBLICAN") |>
  group_by(year, state_po, party_simplified) |>
  summarize(votes = sum(candidatevotes))

# pivot for plot

pres_elections_temp2 <- pivot_wider(pres_elections_temp,
  # id_cols=(year,state_po),
  names_from = party_simplified,
  values_from = votes
)

# add new column with winning party
pres_elections_temp2 <- pres_elections_temp2 |>
  mutate(party_won = case_when(DEMOCRAT > REPUBLICAN ~ "Democrat", TRUE ~ "Republican"))


# create a df with state boundaries and election data
el20_for_map_overtime <- inner_join(state_map1, pres_elections_temp2, by = c("STUSPS" = "state_po"))
```

```{r, fig.width=30, fig.height=36}
# create a plot for 2000 presidential election

p1 <- ggplot(
  el20_for_map_overtime,
  aes(
    geometry = geometry,
    fill = party_won
  )
) +
  geom_sf() +
  scale_fill_manual(values = c(
    "Democrat" = "blue",
    "Republican" = "red"
  )) +
  facet_wrap(~ factor(year), labeller = as_labeller(function(x) paste("year:", x)), ncol = 1) +
  ggtitle("US Presidential Election Results Over Time") +
  theme(
    strip.text = element_text(size = 24),
    legend.text = element_text(size = 24), # Increase legend label text size
    legend.title = element_text(size = 24), # Increase legend title text size
    legend.key.size = unit(3, "lines"),
    plot.title = element_text(hjust = 0.5, size = 24)
  )

p1
```
As we can see on this plot, the changes in the U.S. electoral map reflect significant shifts in political alignments, resulting in a very polarized and competitive landscape, especially lately. 

